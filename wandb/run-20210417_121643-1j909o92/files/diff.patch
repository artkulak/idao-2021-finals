diff --git a/Baseline.ipynb b/Baseline.ipynb
index 025c660..f93f599 100644
--- a/Baseline.ipynb
+++ b/Baseline.ipynb
@@ -2,8 +2,8 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 32,
-   "id": "1e4e9900",
+   "execution_count": 1,
+   "id": "8857f007",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -23,6 +23,8 @@
     "from sklearn.model_selection import KFold\n",
     "from sklearn.model_selection import train_test_split\n",
     "from sklearn.metrics import accuracy_score\n",
+    "from sklearn.preprocessing import LabelEncoder\n",
+    "from scoring import local_scorer\n",
     "\n",
     "from lightgbm import LGBMClassifier\n",
     "\n",
@@ -35,10 +37,11 @@
     "OUTPUT_PATH = Path('../output')\n",
     "TRAIN_PATH = INPUT_PATH \n",
     "\n",
-    "TARGET_COLUMNS = ['sale_flg', 'sale_amount']\n",
+    "TARGET_COLUMNS = ['sale_flg', 'sale_amount', 'contacts']\n",
+    "FIXED_SEEDS = [948, 534, 432, 597, 103, 21, 2242, 17, 20, 29]\n",
     "\n",
     "RANDOM_SEED = 4444\n",
-    "USE_WANDB = True\n",
+    "USE_WANDB = False\n",
     "CURRENT_TIME = str(datetime.datetime.now()).replace(' ', '_').split('.')[0]\n",
     "\n",
     "def seed_everything(seed=1234):\n",
@@ -50,98 +53,42 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 33,
-   "id": "6c9f5a56",
+   "execution_count": 2,
+   "id": "d57f71c9",
    "metadata": {},
    "outputs": [],
    "source": [
     "###############\n",
     "# Config\n",
     "###############\n",
-    "\n"
+    "\n",
+    "n_seed = 5\n",
+    "n_fold = 5\n",
+    "prediction_threshold = 0.01"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 34,
-   "id": "b9d4e365",
+   "execution_count": 3,
+   "id": "f244caf6",
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n"
-     ]
-    },
-    {
-     "name": "stdin",
-     "output_type": "stream",
-     "text": [
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Paste an API key from your profile and hit enter:  ········································\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /home/jupyter/.netrc\n",
-      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33martkulak\u001b[0m (use `wandb login --relogin` to force relogin)\n"
-     ]
-    },
-    {
-     "data": {
-      "text/html": [
-       "\n",
-       "                Tracking run with wandb version 0.10.26<br/>\n",
-       "                Syncing run <strong style=\"color:#cdcd00\">2021-04-17_09:06:58</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
-       "                Project page: <a href=\"https://wandb.ai/artkulak/idao-2021-finals\" target=\"_blank\">https://wandb.ai/artkulak/idao-2021-finals</a><br/>\n",
-       "                Run page: <a href=\"https://wandb.ai/artkulak/idao-2021-finals/runs/38amsyrb\" target=\"_blank\">https://wandb.ai/artkulak/idao-2021-finals/runs/38amsyrb</a><br/>\n",
-       "                Run data is saved locally in <code>/home/jupyter/idao-2021-finals/wandb/run-20210417_090709-38amsyrb</code><br/><br/>\n",
-       "            "
-      ],
-      "text/plain": [
-       "<IPython.core.display.HTML object>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
+   "outputs": [],
    "source": [
     "if USE_WANDB:\n",
-    "    \n",
     "    wandb.login()\n",
     "    run = wandb.init(project=\"idao-2021-finals\", name = f'{CURRENT_TIME}') # todo add config here"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 35,
-   "id": "20869ead",
+   "execution_count": null,
+   "id": "e7a5b824",
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/decorator.py:231: DtypeWarning: Columns (10) have mixed types.Specify dtype option on import or set low_memory=False.\n",
-      "  return caller(func, *(extras + args), **kw)\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "CPU times: user 6.56 s, sys: 589 ms, total: 7.15 s\n",
-      "Wall time: 7.14 s\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "%%time\n",
     "\n",
-    "train = pd.read_csv(INPUT_PATH / 'trxn.csv')\n",
+    "transactions = pd.read_csv(INPUT_PATH / 'trxn.csv')\n",
     "assets_under_management = pd.read_csv(INPUT_PATH / 'aum.csv')\n",
     "balance = pd.read_csv(INPUT_PATH / 'balance.csv')\n",
     "client = pd.read_csv(INPUT_PATH / 'client.csv')\n",
@@ -155,7 +102,7 @@
   },
   {
    "cell_type": "markdown",
-   "id": "3755974b",
+   "id": "39873872",
    "metadata": {},
    "source": [
     "## Data prep"
@@ -163,100 +110,238 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 36,
-   "id": "e4f9708f",
+   "execution_count": null,
+   "id": "de3bc026",
    "metadata": {},
    "outputs": [],
    "source": [
-    "X = funnel.drop(columns = TARGET_COLUMNS + ['client_id'])\n",
-    "Y = funnel[TARGET_COLUMNS[0]]"
+    "def create_features(data):\n",
+    "    \n",
+    "    data = data.copy()\n",
+    "    # transaction features\n",
+    "    data['cards_count'] = data['client_id'].map(transactions.groupby('client_id')['card_id'].count()).fillna(0)\n",
+    "    data['total_transaction_amount'] = data['client_id'].map(transactions.groupby('client_id')['tran_amt_rur'].sum()).fillna(0) # add monthly, daily, etc\n",
+    "    \n",
+    "    return data"
    ]
   },
   {
-   "cell_type": "markdown",
-   "id": "b9dd2659",
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "7d4e3f13",
    "metadata": {},
+   "outputs": [],
    "source": [
-    "## Train"
+    "# data merge\n",
+    "\n",
+    "data = funnel.merge(client, on=['client_id'])"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 37,
-   "id": "0223aa91",
+   "execution_count": null,
+   "id": "49106501",
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Accuracy score 0.8506046511627907\n"
-     ]
-    },
-    {
-     "ename": "NameError",
-     "evalue": "name 'private_test_auc' is not defined",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
-      "\u001b[0;32m<ipython-input-37-51276d71e8c0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mUSE_WANDB\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m     \u001b[0mrun\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msummary\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"private_test_auc\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprivate_test_auc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
-      "\u001b[0;31mNameError\u001b[0m: name 'private_test_auc' is not defined"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
-    "model = LGBMClassifier(n_jobs = -1)\n",
-    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state = RANDOM_SEED)\n",
-    "model.fit(X_train, Y_train)\n",
-    "\n",
-    "Y_pred = model.predict(X_test)\n",
-    "validation_accuracy = accuracy_score(Y_test, Y_pred)\n",
-    "print(f'Accuracy score {validation_accuracy}')\n",
+    "# data encode\n",
     "\n",
-    "validation_accuracy = accuracy_score(Y_test, Y_pred)\n",
+    "le = LabelEncoder()\n",
+    "fill_cols = ['gender', 'citizenship', 'education', 'job_type']\n",
+    "for col in fill_cols:\n",
+    "    data[col] = le.fit_transform(data[col].astype(str))\n",
+    "    joblib.dump(le, OUTPUT_PATH / 'preprocessors' / f'{col}.pkl')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "76aae1ad",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# create features\n",
     "\n",
-    "if USE_WANDB:\n",
-    "    run.summary[\"validation_accuracy\"] = validation_accuracy"
+    "data = create_features(data)"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": null,
-   "id": "f04bbc87",
+   "id": "ef22a514",
    "metadata": {},
    "outputs": [],
    "source": [
-    "model.fit(X, Y)"
+    "X = data.drop(columns = TARGET_COLUMNS + ['client_id'])\n",
+    "Y = data[TARGET_COLUMNS[0]]"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "1aec474d",
+   "metadata": {},
+   "source": [
+    "## Train"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": null,
-   "id": "876746b6",
+   "id": "0913e0dd",
    "metadata": {},
    "outputs": [],
    "source": [
+    "import shutil\n",
     "try:\n",
     "    os.mkdir(OUTPUT_PATH / 'models')\n",
     "except:\n",
-    "    pass\n",
+    "    shutil.rmtree(OUTPUT_PATH / 'models')\n",
+    "    os.mkdir(OUTPUT_PATH / 'models')\n",
+    "    \n",
+    "try:\n",
+    "    os.mkdir(OUTPUT_PATH / 'preprocessors')\n",
+    "except:\n",
+    "    shutil.rmtree(OUTPUT_PATH / 'preprocessors')\n",
+    "    os.mkdir(OUTPUT_PATH / 'preprocessors')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "a0cd5a7f",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "def running_train(X_train, Y_train, X_val, Y_val, i_fold=None, seed=None, params = None):\n",
+    "    # prepare for train\n",
+    "    \n",
+    "    params = {\n",
+    "              \"n_jobs\":-1\n",
+    "              }\n",
+    "    \n",
+    "    \n",
+    "    model = LGBMClassifier(**params) # define model here\n",
+    "    \n",
+    "    # Fit and save model\n",
+    "    model.fit(X_train, Y_train,   eval_set=(X_val, Y_val), early_stopping_rounds=500, verbose=False)\n",
+    "    joblib.dump(model, OUTPUT_PATH / 'models' / f'lightgbm_{i_fold}_{seed}_{CURRENT_TIME}.pkl')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "4711a115",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "oof = np.zeros((X.shape[0], n_seed)) # cv_score\n",
+    "seeds = []\n",
+    "for i_seed in range(n_seed):\n",
+    "    seed = FIXED_SEEDS[i_seed]\n",
+    "    seed_everything(seed)\n",
     "\n",
-    "# save model\n",
-    "joblib.dump(model, OUTPUT_PATH / 'models' / f'lightgbm_{CURRENT_TIME}.pkl')\n",
-    "# load model\n",
-    "model = joblib.load( OUTPUT_PATH / 'models' / f'lightgbm_{CURRENT_TIME}.pkl')"
+    "    seeds.append(seed)\n",
+    "    print('Seed: {}, {}/{}'.format(seed, i_seed + 1, n_seed))\n",
+    "    kf = KFold(n_splits=n_fold, random_state=seed, shuffle=True)\n",
+    "    for i_fold, (train_idx, val_idx) in enumerate(kf.split(X, Y)):\n",
+    "        print(\"# Fold: {}/{} (seed: {}/{})\".format(i_fold + 1, n_fold, i_seed + 1, n_seed))\n",
+    "\n",
+    "        # dataset\n",
+    "        X_train, Y_train = X.iloc[train_idx], Y[train_idx]\n",
+    "        X_val, Y_val = X.iloc[val_idx], Y[val_idx]\n",
+    "\n",
+    "\n",
+    "        # train\n",
+    "        running_train(X_train, Y_train, X_val, Y_val, i_fold=i_fold, seed=seed)\n",
+    "\n",
+    "        # predict on oof\n",
+    "        print('predict on oof...', end='')\n",
+    "        model = joblib.load( OUTPUT_PATH / 'models' / f'lightgbm_{i_fold}_{seed}_{CURRENT_TIME}.pkl')\n",
+    "\n",
+    "        prediction = model.predict_proba(X_val)[:, 1]\n",
+    "\n",
+    "        oof[val_idx, i_seed] = prediction\n",
+    "        print('  done.')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "4258ee39",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "Y_predicted = (np.mean(oof, axis = 1) > prediction_threshold).astype(int)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "e13a8e72",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "Y_test = funnel[['client_id', 'sale_flg']].set_index('client_id')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "f9d0c7cf",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "try: \n",
+    "    os.mkdir(OUTPUT_PATH / 'scoring')\n",
+    "except:\n",
+    "    shutil.rmtree(OUTPUT_PATH / 'scoring')\n",
+    "    os.mkdir(OUTPUT_PATH / 'scoring')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "079e055b",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "public_score, private_score = local_scorer.get_score(funnel.set_index('client_id'), Y_predicted, Y_test)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "a1a8deb0",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "validation_accuracy = accuracy_score(Y, Y_predicted)\n",
+    "print(f'Public ANIC {public_score} Private ANIC {private_score}')\n",
+    "print(f'ANIC {(public_score+private_score)/2}')\n",
+    "print(f'Accuracy score: {validation_accuracy}')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "be9668fa",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "if USE_WANDB:\n",
+    "    run.summary[\"validation_accuracy\"] = validation_accuracy\n",
+    "    run.summary[\"anic\"] = (public_score + private_score) / 2"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": null,
-   "id": "61781ec2",
+   "id": "67493583",
    "metadata": {},
    "outputs": [],
    "source": [
     "if USE_WANDB:\n",
-    "    run"
+    "    run.finish()"
    ]
   }
  ],
diff --git a/EDA.ipynb b/EDA.ipynb
index b8cb08b..74b4cba 100644
--- a/EDA.ipynb
+++ b/EDA.ipynb
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 15,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -10,14 +10,17 @@
     "import pandas as pd\n",
     "import numpy as np\n",
     "import os\n",
+    "import seaborn as sns\n",
+    "import matplotlib.pyplot as plt\n",
     "\n",
     "INPUT_PATH = Path('../input')\n",
-    "OUTPUT_PATH = Path('../output')"
+    "OUTPUT_PATH = Path('../output')\n",
+    "pd.set_option('display.float_format', str)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 46,
    "metadata": {},
    "outputs": [
     {
@@ -32,16 +35,16 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "CPU times: user 6.62 s, sys: 806 ms, total: 7.43 s\n",
-      "Wall time: 7.42 s\n"
+      "CPU times: user 6.99 s, sys: 647 ms, total: 7.64 s\n",
+      "Wall time: 7.64 s\n"
      ]
     }
    ],
    "source": [
     "%%time\n",
     "\n",
-    "train = pd.read_csv(INPUT_PATH / 'trxn.csv')\n",
-    "assets_under_management = pd.read_csv(INPUT_PATH / 'aum.csv')\n",
+    "tran = pd.read_csv(INPUT_PATH / 'trxn.csv')\n",
+    "aum = pd.read_csv(INPUT_PATH / 'aum.csv')\n",
     "balance = pd.read_csv(INPUT_PATH / 'balance.csv')\n",
     "client = pd.read_csv(INPUT_PATH / 'client.csv')\n",
     "campaigns = pd.read_csv(INPUT_PATH / 'com.csv')\n",
@@ -52,6 +55,17 @@
     "appl = pd.read_csv(INPUT_PATH / 'appl.csv')"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": 33,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "def show_nan_number(df):\n",
+    "    for col in df.columns:\n",
+    "        print(f'NaNs for \"{col}\": {df[col].isna().sum()}')"
+   ]
+  },
   {
    "cell_type": "markdown",
    "metadata": {},
@@ -61,7 +75,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 23,
+   "execution_count": 20,
    "metadata": {},
    "outputs": [
     {
@@ -203,20 +217,218 @@
        "4         ODTS AGANGRAD  Cash withdrawal through an ATM           NaN  "
       ]
      },
-     "execution_count": 23,
+     "execution_count": 20,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
     "# card operations\n",
-    "print(train.shape)\n",
-    "train.head()"
+    "print(tran.shape)\n",
+    "tran.head()"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 24,
+   "execution_count": 34,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "NaNs for \"client_id\": 0\n",
+      "NaNs for \"card_id\": 0\n",
+      "NaNs for \"tran_time\": 0\n",
+      "NaNs for \"tran_amt_rur\": 0\n",
+      "NaNs for \"mcc_cd\": 132\n",
+      "NaNs for \"merchant_cd\": 0\n",
+      "NaNs for \"txn_country\": 0\n",
+      "NaNs for \"txn_city\": 5385\n",
+      "NaNs for \"tsp_name\": 2162\n",
+      "NaNs for \"txn_comment_1\": 0\n",
+      "NaNs for \"txn_comment_2\": 2638786\n"
+     ]
+    }
+   ],
+   "source": [
+    "show_info(tran)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 21,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "307"
+      ]
+     },
+     "execution_count": 21,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "tran['mcc_cd'].nunique()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 22,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "count            3035705.0\n",
+       "mean     2744.739667391924\n",
+       "std     15011.821343982692\n",
+       "min                    0.0\n",
+       "25%                  194.0\n",
+       "50%                  486.0\n",
+       "75%                 1275.0\n",
+       "max              7527563.0\n",
+       "Name: tran_amt_rur, dtype: float64"
+      ]
+     },
+     "execution_count": 22,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "tran['tran_amt_rur'].describe()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 25,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "785265           MAGNIT GM ISHIM\n",
+       "998643       SEMYA NA SOLDATOVA.\n",
+       "282047         KHIMCHISTKA NIKKO\n",
+       "329737               PYATEROCHKA\n",
+       "462088                 DNS ORION\n",
+       "6650                         ATM\n",
+       "194251        UNIQLO EVROPEYSKIY\n",
+       "2523178                  MONETKA\n",
+       "461368                OOO GARANT\n",
+       "1608817         MAGNIT MM BOBINA\n",
+       "1601680    MAGNIT GM NOVOCHERKAS\n",
+       "2312451               OOO KORONA\n",
+       "122749            OOO NORSITRANS\n",
+       "2574033      ELEKTRONNAYA SHKOLA\n",
+       "1489534               VETKLINIKA\n",
+       "2310440       MAGNIT MM TOGORIYA\n",
+       "2719319                  KHAGANI\n",
+       "189913                  BLAGRKTS\n",
+       "1741605           MAGAZIN MARIYA\n",
+       "880758           ZELENYJJ OSTROV\n",
+       "Name: tsp_name, dtype: object"
+      ]
+     },
+     "execution_count": 25,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "tran['tsp_name'].sample(20)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 36,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "2687443     Payment for goods and services\n",
+       "3000285                  Cashless transfer\n",
+       "849450      Payment for goods and services\n",
+       "1005029     Payment for goods and services\n",
+       "77669       Payment for goods and services\n",
+       "2790473     Payment for goods and services\n",
+       "2967359     Payment for goods and services\n",
+       "989160      Payment for goods and services\n",
+       "18152       Cash withdrawal through an ATM\n",
+       "1424632     Payment for goods and services\n",
+       "1403985     Payment for goods and services\n",
+       "86406       Payment for goods and services\n",
+       "2200888     Cash withdrawal through an ATM\n",
+       "2496800     Payment for goods and services\n",
+       "2632831     Payment for goods and services\n",
+       "343637      Payment for goods and services\n",
+       "2188275     Cash withdrawal through an ATM\n",
+       "562360      Payment for goods and services\n",
+       "602394                   Cashless transfer\n",
+       "2039487    Payment by card (bank transfer)\n",
+       "Name: txn_comment_1, dtype: object"
+      ]
+     },
+     "execution_count": 36,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "tran['txn_comment_1'].sample(20)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 43,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# tran[tran['tsp_name'].isna()]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 45,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "array([nan, 'Opening Online', 'Purchase payment (web)', '<manual mode>',\n",
+       "       'VISA MONEY TRANSFER', 'MASTERCARD MONEYSEND'], dtype=object)"
+      ]
+     },
+     "execution_count": 45,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "tran['txn_comment_2'].unique()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "**Features:**\n",
+    "\n",
+    "* tran_amt_rur - amount of transaction\n",
+    "* mcc_cd - category of merchant business type\n",
+    "* tsp_name - transaction direction (who received the money)\n",
+    "* txn_comment_1 - category of transaction\n",
+    "* txn_comment_2 - mostly NaNs, no important info"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 53,
    "metadata": {},
    "outputs": [
     {
@@ -255,38 +467,205 @@
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
-       "      <th>0</th>\n",
-       "      <td>-1893104556496814867</td>\n",
+       "      <th>93832</th>\n",
+       "      <td>-1508650601755939053</td>\n",
+       "      <td>2019-06-30</td>\n",
+       "      <td>270717.0</td>\n",
+       "      <td>Current accounts</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>108851</th>\n",
+       "      <td>-7839767071081091401</td>\n",
+       "      <td>2019-03-31</td>\n",
+       "      <td>-12.0</td>\n",
+       "      <td>Broker</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>49245</th>\n",
+       "      <td>-6916069209097360878</td>\n",
+       "      <td>2019-04-30</td>\n",
+       "      <td>2.0</td>\n",
+       "      <td>Current accounts</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>78988</th>\n",
+       "      <td>410876916921664044</td>\n",
        "      <td>2018-12-31</td>\n",
-       "      <td>44.0</td>\n",
+       "      <td>4039.0</td>\n",
        "      <td>Current accounts</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>1</th>\n",
-       "      <td>-1893104556496814867</td>\n",
+       "      <th>63021</th>\n",
+       "      <td>-5016855139277913174</td>\n",
+       "      <td>2019-08-31</td>\n",
+       "      <td>42614.0</td>\n",
+       "      <td>Current accounts</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>77145</th>\n",
+       "      <td>-6032965162263481679</td>\n",
+       "      <td>2018-12-31</td>\n",
+       "      <td>2814.0</td>\n",
+       "      <td>Current accounts</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>47684</th>\n",
+       "      <td>-4898849990177348230</td>\n",
+       "      <td>2019-07-31</td>\n",
+       "      <td>271.0</td>\n",
+       "      <td>Current accounts</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>87535</th>\n",
+       "      <td>3349609315336606711</td>\n",
        "      <td>2019-04-30</td>\n",
-       "      <td>44.0</td>\n",
+       "      <td>91599.0</td>\n",
        "      <td>Current accounts</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>2</th>\n",
-       "      <td>-1893104556496814867</td>\n",
+       "      <th>73794</th>\n",
+       "      <td>4031854997948142514</td>\n",
+       "      <td>2019-05-31</td>\n",
+       "      <td>11039.0</td>\n",
+       "      <td>Current accounts</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>86733</th>\n",
+       "      <td>2537507496024398334</td>\n",
+       "      <td>2019-08-31</td>\n",
+       "      <td>325.0</td>\n",
+       "      <td>Current accounts</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "                  client_id month_end_dt  balance_rur_amt      product_code\n",
+       "93832  -1508650601755939053   2019-06-30         270717.0  Current accounts\n",
+       "108851 -7839767071081091401   2019-03-31            -12.0            Broker\n",
+       "49245  -6916069209097360878   2019-04-30              2.0  Current accounts\n",
+       "78988    410876916921664044   2018-12-31           4039.0  Current accounts\n",
+       "63021  -5016855139277913174   2019-08-31          42614.0  Current accounts\n",
+       "77145  -6032965162263481679   2018-12-31           2814.0  Current accounts\n",
+       "47684  -4898849990177348230   2019-07-31            271.0  Current accounts\n",
+       "87535   3349609315336606711   2019-04-30          91599.0  Current accounts\n",
+       "73794   4031854997948142514   2019-05-31          11039.0  Current accounts\n",
+       "86733   2537507496024398334   2019-08-31            325.0  Current accounts"
+      ]
+     },
+     "execution_count": 53,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "# Assets Under Management\n",
+    "print(aum.shape)\n",
+    "aum.sample(10)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 55,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr style=\"text-align: right;\">\n",
+       "      <th></th>\n",
+       "      <th>client_id</th>\n",
+       "      <th>month_end_dt</th>\n",
+       "      <th>balance_rur_amt</th>\n",
+       "      <th>product_code</th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th>77144</th>\n",
+       "      <td>-6032965162263481679</td>\n",
+       "      <td>2018-11-30</td>\n",
+       "      <td>14625.0</td>\n",
+       "      <td>Current accounts</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>77145</th>\n",
+       "      <td>-6032965162263481679</td>\n",
+       "      <td>2018-12-31</td>\n",
+       "      <td>2814.0</td>\n",
+       "      <td>Current accounts</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>77146</th>\n",
+       "      <td>-6032965162263481679</td>\n",
+       "      <td>2019-01-31</td>\n",
+       "      <td>85.0</td>\n",
+       "      <td>Current accounts</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>77143</th>\n",
+       "      <td>-6032965162263481679</td>\n",
+       "      <td>2019-02-28</td>\n",
+       "      <td>907.0</td>\n",
+       "      <td>Current accounts</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>77150</th>\n",
+       "      <td>-6032965162263481679</td>\n",
+       "      <td>2019-03-31</td>\n",
+       "      <td>58.0</td>\n",
+       "      <td>Current accounts</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>77141</th>\n",
+       "      <td>-6032965162263481679</td>\n",
+       "      <td>2019-04-30</td>\n",
+       "      <td>3644.0</td>\n",
+       "      <td>Current accounts</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>77147</th>\n",
+       "      <td>-6032965162263481679</td>\n",
+       "      <td>2019-05-31</td>\n",
+       "      <td>1848.0</td>\n",
+       "      <td>Current accounts</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>77142</th>\n",
+       "      <td>-6032965162263481679</td>\n",
        "      <td>2019-06-30</td>\n",
-       "      <td>6115.0</td>\n",
+       "      <td>3843.0</td>\n",
        "      <td>Current accounts</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>3</th>\n",
-       "      <td>-1893104556496814867</td>\n",
+       "      <th>77148</th>\n",
+       "      <td>-6032965162263481679</td>\n",
        "      <td>2019-07-31</td>\n",
-       "      <td>6115.0</td>\n",
+       "      <td>107.0</td>\n",
        "      <td>Current accounts</td>\n",
        "    </tr>\n",
        "    <tr>\n",
-       "      <th>4</th>\n",
-       "      <td>-1893104556496814867</td>\n",
+       "      <th>77149</th>\n",
+       "      <td>-6032965162263481679</td>\n",
        "      <td>2019-08-31</td>\n",
-       "      <td>45685.0</td>\n",
+       "      <td>3574.0</td>\n",
        "      <td>Current accounts</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
@@ -294,28 +673,61 @@
        "</div>"
       ],
       "text/plain": [
-       "             client_id month_end_dt  balance_rur_amt      product_code\n",
-       "0 -1893104556496814867   2018-12-31             44.0  Current accounts\n",
-       "1 -1893104556496814867   2019-04-30             44.0  Current accounts\n",
-       "2 -1893104556496814867   2019-06-30           6115.0  Current accounts\n",
-       "3 -1893104556496814867   2019-07-31           6115.0  Current accounts\n",
-       "4 -1893104556496814867   2019-08-31          45685.0  Current accounts"
+       "                 client_id month_end_dt  balance_rur_amt      product_code\n",
+       "77144 -6032965162263481679   2018-11-30          14625.0  Current accounts\n",
+       "77145 -6032965162263481679   2018-12-31           2814.0  Current accounts\n",
+       "77146 -6032965162263481679   2019-01-31             85.0  Current accounts\n",
+       "77143 -6032965162263481679   2019-02-28            907.0  Current accounts\n",
+       "77150 -6032965162263481679   2019-03-31             58.0  Current accounts\n",
+       "77141 -6032965162263481679   2019-04-30           3644.0  Current accounts\n",
+       "77147 -6032965162263481679   2019-05-31           1848.0  Current accounts\n",
+       "77142 -6032965162263481679   2019-06-30           3843.0  Current accounts\n",
+       "77148 -6032965162263481679   2019-07-31            107.0  Current accounts\n",
+       "77149 -6032965162263481679   2019-08-31           3574.0  Current accounts"
       ]
      },
-     "execution_count": 24,
+     "execution_count": 55,
      "metadata": {},
      "output_type": "execute_result"
     }
    ],
    "source": [
-    "# Assets Under Management\n",
-    "print(assets_under_management.shape)\n",
-    "assets_under_management.head()"
+    "aum.query('client_id == -6032965162263481679').sort_values('month_end_dt')"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 25,
+   "execution_count": 57,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "array(['Current accounts', 'Broker', 'Time account', 'UK', 'NSJ', 'ILI'],\n",
+       "      dtype=object)"
+      ]
+     },
+     "execution_count": 57,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "aum['product_code'].unique()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "**Feature engineering:**\n",
+    "\n",
+    "* mean/median/other statistics of client balance"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 68,
    "metadata": {},
    "outputs": [
     {
@@ -445,7 +857,7 @@
        "4  Cash on demand  "
       ]
      },
-     "execution_count": 25,
+     "execution_count": 68,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -456,6 +868,126 @@
     "balance.head()"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": 70,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "array(['CURRENT ACCOUNTS', 'DEPOSITS', 'Cash on demand',\n",
+       "       'URGENT DEPOSITS BIN', 'SALARY CARDS', 'KN', 'DEBIT CARDS',\n",
+       "       'VIP DEBIT CARDS', 'CASH CREDITS (X-SALE)', 'CREDITS IN CASH OR',\n",
+       "       'LENDING SALARY CLIENTS', 'LOANS FOR EMPLOYEES', nan,\n",
+       "       'CREDIT CARDS', 'VIP CREDIT CARDS', 'PREAD MAP', 'TECHNICAL CARDS',\n",
+       "       'MORTGAGE', 'OTHER MORTGAGE', 'CAR LOANS'], dtype=object)"
+      ]
+     },
+     "execution_count": 70,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "balance['prod_cat_name'].unique()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 71,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "array(['Cash on demand', 'Time deposits', 'Salary cards', 'Debit cards',\n",
+       "       'PILS', nan, 'Open_card credit card', 'Credit card other', 'POS',\n",
+       "       'Credit card 120 days', 'Prepaid cards', 'Technical cards',\n",
+       "       'Mortgage', 'Car loans'], dtype=object)"
+      ]
+     },
+     "execution_count": 71,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "balance['prod_group_name'].unique()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 74,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "8"
+      ]
+     },
+     "execution_count": 74,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "balance.query('prod_cat_name == \"KN\"').prod_group_name.nunique()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 75,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "3"
+      ]
+     },
+     "execution_count": 75,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "balance.query('prod_group_name == \"Debit cards\"').prod_cat_name.nunique()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 78,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "NaNs for \"client_id\": 0\n",
+      "NaNs for \"crncy_cd\": 888\n",
+      "NaNs for \"eop_bal_sum_rur\": 0\n",
+      "NaNs for \"min_bal_sum_rur\": 0\n",
+      "NaNs for \"max_bal_sum_rur\": 0\n",
+      "NaNs for \"avg_bal_sum_rur\": 0\n",
+      "NaNs for \"month_end_dt\": 0\n",
+      "NaNs for \"prod_cat_name\": 1890\n",
+      "NaNs for \"prod_group_name\": 96080\n"
+     ]
+    }
+   ],
+   "source": [
+    "show_nan_number(balance)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
   {
    "cell_type": "code",
    "execution_count": 26,
@@ -588,7 +1120,51 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 27,
+   "execution_count": 76,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(21498, 16)"
+      ]
+     },
+     "execution_count": 76,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "funnel.shape"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 77,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "NaNs for \"client_id\": 0\n",
+      "NaNs for \"gender\": 3\n",
+      "NaNs for \"age\": 3\n",
+      "NaNs for \"region\": 0\n",
+      "NaNs for \"city\": 0\n",
+      "NaNs for \"citizenship\": 5\n",
+      "NaNs for \"education\": 12218\n",
+      "NaNs for \"job_type\": 21423\n"
+     ]
+    }
+   ],
+   "source": [
+    "show_nan_number(client)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 79,
    "metadata": {},
    "outputs": [
     {
@@ -717,7 +1293,7 @@
        "4          16   2019-02-28    CALL  Credit Card  "
       ]
      },
-     "execution_count": 27,
+     "execution_count": 79,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -728,6 +1304,75 @@
     "campaigns.head()"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": 83,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "0.01736323028614391"
+      ]
+     },
+     "execution_count": 83,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "campaigns.agr_flg.mean()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 85,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "0.13033479279996463"
+      ]
+     },
+     "execution_count": 85,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "campaigns.otkaz.mean()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 86,
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "0.014178939454247932"
+      ]
+     },
+     "execution_count": 86,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "campaigns.dumaet.mean()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "**Feature engineering:**\n",
+    "\n",
+    "* Number of previous attempts for each clients"
+   ]
+  },
   {
    "cell_type": "code",
    "execution_count": 28,
@@ -858,6 +1503,30 @@
     "deals.head()"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": 88,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "NaNs for \"client_id\": 0\n",
+      "NaNs for \"agrmnt_start_dt\": 0\n",
+      "NaNs for \"agrmnt_close_dt\": 41789\n",
+      "NaNs for \"crncy_cd\": 77\n",
+      "NaNs for \"agrmnt_rate_active\": 78890\n",
+      "NaNs for \"agrmnt_rate_passive\": 60279\n",
+      "NaNs for \"agrmnt_sum_rur\": 3601\n",
+      "NaNs for \"prod_type_name\": 8626\n"
+     ]
+    }
+   ],
+   "source": [
+    "show_nan_number(deals)"
+   ]
+  },
   {
    "cell_type": "code",
    "execution_count": 29,
@@ -1352,20 +2021,6 @@
     "print(appl.shape)\n",
     "appl.head()"
    ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "## EDA"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "metadata": {},
-   "outputs": [],
-   "source": []
   }
  ],
  "metadata": {
diff --git a/local_scorer.py b/local_scorer.py
deleted file mode 100644
index 35034e7..0000000
--- a/local_scorer.py
+++ /dev/null
@@ -1,35 +0,0 @@
-from scorer import calculate_metric
-import pandas as pd
-
-TMP_SUBMISSION = 'submission/test_submission.csv'
-TMP_TRUTH = 'submission/test_truth.csv'
-
-TARGET_COLUMNS = ['sale_flg', 'sale_amount']
-TRUTH_COLUMNS = ['contacts', 'sale_flg', 'sale_amount']
-SUBMISSION_COLS = ['client_id', 'target']
-
-
-def write_submission(Y_pred, Y_test):
-    tmp_sub = pd.Series(Y_pred, index=Y_test.index)
-    tmp_sub = tmp_sub.reset_index()
-    tmp_sub.columns = SUBMISSION_COLS
-    tmp_sub.to_csv(TMP_SUBMISSION, index=False)
-
-
-def write_truth(test_df):
-    assert test_df.index.name == 'client_id'
-    truth_test = test_df[TRUTH_COLUMNS]
-    truth_test['split'] = 'public'
-    truth_test.iloc[:truth_test.shape[0] // 2].split = 'private'
-    truth_test.to_csv(TMP_TRUTH)
-
-def get_score(test_df, Y_pred, Y_test):
-    """
-    test_df: test_df(indexed by client id)
-    Y_pred: Y_pred
-    Y_test: Y_test(indexed by client id)
-    """
-    write_truth(test_df)
-    write_submission(Y_pred, Y_test)
-    public, private = calculate_metric(TMP_TRUTH, TMP_SUBMISSION)
-    return public, private
diff --git a/scorer.py b/scorer.py
deleted file mode 100644
index 92d9623..0000000
--- a/scorer.py
+++ /dev/null
@@ -1,82 +0,0 @@
-from __future__ import print_function
-from sys import argv
-from sys import exit
-from sys import stderr
-import pandas as pd
-
-
-USER_ID = 'client_id'
-PREDICTION = 'target'
-SPLIT = 'split'
-CONTACTS = 'contacts'
-SALE_FLAG = 'sale_flg'
-SALE_AMOUNT = 'sale_amount'
-TRUTH_COLUMNS = [USER_ID, SPLIT, CONTACTS, SALE_AMOUNT, SALE_FLAG]
-PREDICTION_COLUMNS = [USER_ID, PREDICTION]
-CALL_COST = 400 / 0.1
-PUBLIC = 'public'
-PRIVATE = 'private'
-
-
-def show_presentation_error(message):
-    print(message, file=stderr)
-    exit(4)
-
-
-def read_truth_file(path):
-    """READ AND CHECK TRUTH FILE"""
-    truth = pd.read_csv(path)
-    assert set(truth) == set(TRUTH_COLUMNS)
-    assert set(truth[SPLIT]) == set([PUBLIC, PRIVATE])
-    return truth
-
-
-def read_user_file(path):
-    """READ AND CHECK PREDICTIONS FILE"""
-    user = pd.read_csv(path)
-    if set(user.columns) != set(PREDICTION_COLUMNS):
-        show_presentation_error(
-            f"prediction.csv is expected to have {set(PREDICTION_COLUMNS)} columns, but has {set(user.columns)} columns"
-        )
-    if len(set(user[PREDICTION]).difference([1, 0])) > 0:
-        show_presentation_error("predictions should be either 1 or 0")
-    return user
-
-
-def calculate_metric(truth_file, user_file):
-
-    truth = read_truth_file(truth_file)
-    user = read_user_file(user_file)
-
-    """CHECK USER FILE AGAINST TRUTH FILE"""
-    prediction_dict = {row[USER_ID]: row[PREDICTION] for i, row in user.iterrows()}
-    if set(prediction_dict.keys()) != set(truth[USER_ID]):
-        show_presentation_error(
-            "{} from y_true.csv and predictions.csv are not the same".format(USER_ID)
-        )
-
-    """MERGE THEM TOGETHER"""
-    truth[PREDICTION] = truth[USER_ID].map(prediction_dict)
-
-    """CALCULATE METRIC VALUES"""
-    selected = truth.query("{} == 1".format(PREDICTION))
-    selected['gain'] = selected[SALE_FLAG] * selected[SALE_AMOUNT].fillna(0) - selected[CONTACTS] * CALL_COST
-    money_earned = selected.groupby(SPLIT).gain.sum()
-    money_earned[PUBLIC] = (
-        money_earned.get(PUBLIC, 0) / len(truth.query('{} == "{}"'.format(SPLIT, PUBLIC)))
-    )
-    money_earned[PRIVATE] = (
-        money_earned.get(PRIVATE, 0) / len(truth.query('{} == "{}"'.format(SPLIT, PRIVATE)))
-    )
-    return money_earned[PUBLIC], money_earned[PRIVATE]
-
-
-if __name__ == '__main__':
-    # the Yandex.Contest use case
-    if len(argv) == 4:
-        user_file, input_file, truth_file = argv[1], argv[2], argv[3]
-    # the usual use case
-    elif len(argv) == 3:
-        truth_file, user_file = argv[1], argv[2]
-    public, private = calculate_metric(truth_file, user_file)
-    print('{} is final (private) score; {} - public score'.format(private, public))
diff --git a/wandb/latest-run b/wandb/latest-run
index 60db497..a36d3e7 120000
--- a/wandb/latest-run
+++ b/wandb/latest-run
@@ -1 +1 @@
-run-20210417_090709-38amsyrb
\ No newline at end of file
+run-20210417_121643-1j909o92
\ No newline at end of file
