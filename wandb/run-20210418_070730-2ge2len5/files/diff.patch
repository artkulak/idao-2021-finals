diff --git a/Baseline.ipynb b/Baseline.ipynb
index 688b70e..5b19c93 100644
--- a/Baseline.ipynb
+++ b/Baseline.ipynb
@@ -2,8 +2,8 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 119,
-   "id": "8ef5f620",
+   "execution_count": 528,
+   "id": "6a9891f4",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -43,7 +43,7 @@
     "FIXED_SEEDS = [948, 534, 432, 597, 103, 21, 2242, 17, 20, 29]\n",
     "\n",
     "RANDOM_SEED = 4444\n",
-    "USE_WANDB = False\n",
+    "USE_WANDB = True\n",
     "CURRENT_TIME = str(datetime.datetime.now()).replace(' ', '_').split('.')[0]\n",
     "\n",
     "def seed_everything(seed=1234):\n",
@@ -55,8 +55,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 88,
-   "id": "5bca7c5f",
+   "execution_count": 529,
+   "id": "575bca14",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -64,8 +64,8 @@
     "# Config\n",
     "###############\n",
     "\n",
-    "n_seed = 5\n",
-    "n_fold = 5\n",
+    "n_seed = 10\n",
+    "n_fold = 3\n",
     "prediction_threshold = 0.2\n",
     "retrain_after_valid = True\n",
     "make_submission = False"
@@ -73,8 +73,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 89,
-   "id": "57ffec67",
+   "execution_count": 530,
+   "id": "d6a6b136",
    "metadata": {},
    "outputs": [
     {
@@ -89,10 +89,10 @@
       "text/html": [
        "\n",
        "                Tracking run with wandb version 0.10.26<br/>\n",
-       "                Syncing run <strong style=\"color:#cdcd00\">2021-04-17_21:01:59</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
+       "                Syncing run <strong style=\"color:#cdcd00\">2021-04-18_07:07:27</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
        "                Project page: <a href=\"https://wandb.ai/artkulak/idao-2021-finals\" target=\"_blank\">https://wandb.ai/artkulak/idao-2021-finals</a><br/>\n",
-       "                Run page: <a href=\"https://wandb.ai/artkulak/idao-2021-finals/runs/1iwwtpsn\" target=\"_blank\">https://wandb.ai/artkulak/idao-2021-finals/runs/1iwwtpsn</a><br/>\n",
-       "                Run data is saved locally in <code>/home/jupyter/idao-2021-finals/wandb/run-20210417_210200-1iwwtpsn</code><br/><br/>\n",
+       "                Run page: <a href=\"https://wandb.ai/artkulak/idao-2021-finals/runs/2ge2len5\" target=\"_blank\">https://wandb.ai/artkulak/idao-2021-finals/runs/2ge2len5</a><br/>\n",
+       "                Run data is saved locally in <code>/home/jupyter/idao-2021-finals/wandb/run-20210418_070730-2ge2len5</code><br/><br/>\n",
        "            "
       ],
       "text/plain": [
@@ -111,8 +111,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 90,
-   "id": "cff76595",
+   "execution_count": null,
+   "id": "dc60e033",
    "metadata": {},
    "outputs": [
     {
@@ -122,14 +122,6 @@
       "/opt/conda/lib/python3.7/site-packages/decorator.py:231: DtypeWarning: Columns (10) have mixed types.Specify dtype option on import or set low_memory=False.\n",
       "  return caller(func, *(extras + args), **kw)\n"
      ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "CPU times: user 6.95 s, sys: 1.29 s, total: 8.25 s\n",
-      "Wall time: 8.24 s\n"
-     ]
     }
    ],
    "source": [
@@ -149,8 +141,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 91,
-   "id": "c958d0ea",
+   "execution_count": null,
+   "id": "363424b5",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -159,7 +151,7 @@
   },
   {
    "cell_type": "markdown",
-   "id": "f659fc89",
+   "id": "2a51be83",
    "metadata": {},
    "source": [
     "## Data prep"
@@ -167,37 +159,47 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 92,
-   "id": "2e71ecc2",
+   "execution_count": null,
+   "id": "833016d0",
    "metadata": {},
    "outputs": [],
    "source": [
-    "# transactions['mcc_cd'] = transactions['mcc_cd'].fillna(-2)\n",
-    "# transactions['txn_city'] = transactions['txn_city'].fillna('<UNK>')\n",
-    "# transactions['tsp_name'] = transactions['tsp_name'].fillna('<UNK>')\n",
-    "# transactions['txn_comment_2'] = transactions['txn_comment_2'].fillna('<UNK>')\n",
+    "transactions['mcc_cd'] = transactions['mcc_cd'].fillna(-2)\n",
+    "transactions['txn_city'] = transactions['txn_city'].fillna('<UNK>')\n",
+    "transactions['tsp_name'] = transactions['tsp_name'].fillna('<UNK>')\n",
+    "transactions['txn_comment_2'] = transactions['txn_comment_2'].fillna('<UNK>')\n",
+    "transactions = transactions.merge(dict_merchant_category_code, on='mcc_cd', how='left')\n",
+    "transactions['brs_mcc_group'] = transactions['brs_mcc_group'].fillna('<UNK>')\n",
+    "transactions['brs_mcc_subgroup'] = transactions['brs_mcc_subgroup'].fillna('<UNK>')\n",
+    "\n",
+    "balance['crncy_cd'] = balance['crncy_cd'].fillna(-2)\n",
+    "balance['prod_cat_name'] = balance['prod_cat_name'].fillna('<UNK>')\n",
+    "balance['prod_group_name'] = balance['prod_group_name'].fillna('<UNK>')\n",
     "\n",
-    "# balance['crncy_cd'] = balance['crncy_cd'].fillna(-2)\n",
-    "# balance['prod_cat_name'] = balance['prod_cat_name'].fillna('<UNK>')\n",
-    "# balance['prod_group_name'] = balance['prod_group_name'].fillna('<UNK>')\n",
+    "client = client.rename(columns={\n",
+    "    'gender': 'client_gender',\n",
+    "    'age': 'client_age',\n",
+    "    'region': 'client_region',\n",
+    "    'city': 'client_city',\n",
+    "    'citizenship': 'client_citizenship',\n",
+    "    'education': 'client_education',\n",
+    "    'job_type': 'client_job_type'\n",
+    "})\n",
     "\n",
+    "campaigns['prod'] = campaigns['prod'].fillna('<UNK>')\n",
     "\n",
-    "# client = client.rename(columns={\n",
-    "#     'gender': 'client_gender',\n",
-    "#     'age': 'client_age',\n",
-    "#     'region': 'client_region',\n",
-    "#     'city': 'client_city',\n",
-    "#     'citizenship': 'client_citizenship',\n",
-    "#     'education': 'client_education',\n",
-    "#     'job_type': 'client_job_type'\n",
-    "# })\n",
-    "# campaigns['prod'] = campaigns['prod'].fillna('<UNK>')"
+    "deals['crncy_cd'] = deals['crncy_cd'].fillna(-2)\n",
+    "deals['agrmnt_rate_active'] = deals['agrmnt_rate_active'].fillna(-2)\n",
+    "deals['agrmnt_rate_passive'] = deals['agrmnt_rate_passive'].fillna(-2)\n",
+    "deals['agrmnt_sum_rur'] = deals['agrmnt_sum_rur'].fillna(-2)\n",
+    "deals['prod_type_name'] = deals['prod_type_name'].fillna('<UNK>')\n",
+    "deals['argmnt_close_start_days'] = (pd.to_datetime(deals['agrmnt_close_dt']) - pd.to_datetime(deals['agrmnt_start_dt'])).dt.days.fillna(-2)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 93,
-   "id": "179a5d79",
+   "execution_count": null,
+   "id": "99b6ef3e",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -217,6 +219,14 @@
     "    return data['client_id'].map(df.groupby('client_id')[col_name].agg(lambda x: scipy.stats.mode(x)[0][0])).fillna(fill_na_value)\n",
     "\n",
     "\n",
+    "def get_feature_max(df, col_name, fill_na_value):\n",
+    "    return data['client_id'].map(df.groupby('client_id')[col_name].max()).fillna(fill_na_value)\n",
+    "\n",
+    "\n",
+    "def get_feature_min(df, col_name, fill_na_value):\n",
+    "    return data['client_id'].map(df.groupby('client_id')[col_name].min()).fillna(fill_na_value)\n",
+    "\n",
+    "\n",
     "def get_feature_mean(df, col_name, fill_na_value):\n",
     "    return data['client_id'].map(df.groupby('client_id')[col_name].mean()).fillna(fill_na_value)\n",
     "\n",
@@ -263,6 +273,12 @@
     "    data['total_txn_comment_2'] = get_feature_total(transactions, 'txn_comment_2')\n",
     "    data['most_common_txn_comment_2'] = get_feature_most_common(transactions, 'txn_comment_2', '<unknown>')\n",
     "    \n",
+    "    data['total_brs_mcc_group'] = get_feature_total(transactions, 'brs_mcc_group')\n",
+    "    data['most_common_brs_mcc_group'] = get_feature_most_common(transactions, 'brs_mcc_group', '<unknown>')\n",
+    "    \n",
+    "    data['total_brs_mcc_subgroup'] = get_feature_total(transactions, 'brs_mcc_subgroup')\n",
+    "    data['most_common_brs_mcc_subgroup'] = get_feature_most_common(transactions, 'brs_mcc_subgroup', '<unknown>')\n",
+    "    \n",
     "    return data\n",
     "\n",
     "\n",
@@ -286,8 +302,8 @@
     "    \n",
     "    data['total_balance'] = data['client_id'].map(balance.groupby('client_id').size()).fillna(0)\n",
     "    \n",
-    "    data['total_crncy_cd'] = get_feature_total(balance, 'crncy_cd')\n",
-    "    data['most_common_crncy_cd'] = get_feature_most_common(balance, 'crncy_cd', -1)\n",
+    "    data['total_balance_crncy_cd'] = get_feature_total(balance, 'crncy_cd')\n",
+    "    data['most_common_balance_crncy_cd'] = get_feature_most_common(balance, 'crncy_cd', -1)\n",
     "    \n",
     "    data['total_eop_bal_sum_rur'] = get_feature_total(balance, 'eop_bal_sum_rur')\n",
     "    data['total_share_eop_bal_sum_rur'] = (data['total_eop_bal_sum_rur'] / data['total_balance']).fillna(0)\n",
@@ -322,6 +338,7 @@
     "def create_features_client(data):\n",
     "    data = data.copy()\n",
     "    \n",
+    "#     data = data.merge(client, on='client_id')\n",
     "    data['match_client_region-region_cd'] = (data['client_region'] == data['region_cd']).astype(int)\n",
     "    data.drop('client_citizenship', axis=1)\n",
     "    \n",
@@ -360,8 +377,29 @@
     "def create_features_deals(data):\n",
     "    data = data.copy()\n",
     "    \n",
-    "    data['number_of_deals'] = data['client_id'].map(deals.groupby('client_id')['crncy_cd'].count()).fillna(0)\n",
-    "    data['mean_deal_sum'] = data['client_id'].map(deals.groupby('client_id')['agrmnt_sum_rur'].mean()).fillna(0)\n",
+    "    data['total_deals'] = data['client_id'].map(deals.groupby('client_id').size()).fillna(0)\n",
+    "    \n",
+    "    data['total_deals_crncy_cd'] = get_feature_total(deals, 'crncy_cd')\n",
+    "    data['most_common_deals_crncy_cd'] = get_feature_most_common(deals, 'crncy_cd', -1)\n",
+    "    \n",
+    "    data['total_agrmnt_rate_active'] = get_feature_total(deals, 'agrmnt_rate_active')\n",
+    "    data['max_agrmnt_rate_active'] = get_feature_max(deals, 'agrmnt_rate_active', -1)\n",
+    "    \n",
+    "    data['total_agrmnt_rate_passive'] = get_feature_total(deals, 'agrmnt_rate_passive')\n",
+    "    data['max_agrmnt_rate_passive'] = get_feature_max(deals, 'agrmnt_rate_passive', -1)\n",
+    "    \n",
+    "    data['total_agrmnt_sum_rur'] = get_feature_total(deals, 'agrmnt_sum_rur')\n",
+    "    data['mean_agrmnt_sum_rur'] = get_feature_mean(deals, 'agrmnt_sum_rur', -1)\n",
+    "    data['std_agrmnt_sum_rur'] = get_feature_std(deals, 'agrmnt_sum_rur', -1)\n",
+    "    \n",
+    "    data['total_prod_type_name'] = get_feature_total(deals, 'prod_type_name')\n",
+    "    data['most_common_prod_type_name'] = get_feature_most_common(deals, 'prod_type_name', '<unknown>')\n",
+    "    \n",
+    "    data['total_argmnt_close_start_days'] = get_feature_total(deals, 'argmnt_close_start_days')\n",
+    "    data['max_argmnt_close_start_days'] = get_feature_max(deals, 'argmnt_close_start_days', -1)\n",
+    "    data['min_argmnt_close_start_days'] = get_feature_min(deals, 'argmnt_close_start_days', -1)\n",
+    "    data['mean_argmnt_close_start_days'] = get_feature_mean(deals, 'argmnt_close_start_days', -1)\n",
+    "    data['std_argmnt_close_start_days'] = get_feature_std(deals, 'argmnt_close_start_days', -1)\n",
     "    \n",
     "    return data\n",
     "\n",
@@ -396,8 +434,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 327,
-   "id": "23ef1f4c",
+   "execution_count": null,
+   "id": "4c78dc63",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -408,123 +446,36 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 339,
-   "id": "932c784d",
+   "execution_count": null,
+   "id": "91d023af",
    "metadata": {},
    "outputs": [],
    "source": [
-    "data['education_target_enc'] = data['education'].map(data.groupby('education')['sale_flg'].mean())"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 340,
-   "id": "5d1a9f10",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/pandas/io/formats/format.py:1405: FutureWarning: Index.ravel returning ndarray is deprecated; in a future version this will return a view on self.\n",
-      "  for val, m in zip(values.ravel(), mask.ravel())\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": [
-       "0             NaN\n",
-       "1             NaN\n",
-       "2             NaN\n",
-       "3             NaN\n",
-       "4        0.425499\n",
-       "           ...   \n",
-       "21493         NaN\n",
-       "21494         NaN\n",
-       "21495         NaN\n",
-       "21496    0.322535\n",
-       "21497         NaN\n",
-       "Name: education_target_enc, Length: 21498, dtype: category\n",
-       "Categories (7, float64): [0.447195, 0.425499, 0.437984, 0.322535, 0.004202, 0.333333, 0.510204]"
-      ]
-     },
-     "execution_count": 340,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "data['education_target_enc']"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 341,
-   "id": "d15861b0",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/pandas/io/formats/format.py:1405: FutureWarning: Index.ravel returning ndarray is deprecated; in a future version this will return a view on self.\n",
-      "  for val, m in zip(values.ravel(), mask.ravel())\n"
-     ]
-    },
-    {
-     "data": {
-      "text/plain": [
-       "0             NaN\n",
-       "1             NaN\n",
-       "2             NaN\n",
-       "3             NaN\n",
-       "4        0.425499\n",
-       "           ...   \n",
-       "21493         NaN\n",
-       "21494         NaN\n",
-       "21495         NaN\n",
-       "21496    0.322535\n",
-       "21497         NaN\n",
-       "Name: education_target_enc, Length: 21498, dtype: category\n",
-       "Categories (7, float64): [0.447195, 0.425499, 0.437984, 0.322535, 0.004202, 0.333333, 0.510204]"
-      ]
-     },
-     "execution_count": 341,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "education_dict = data.groupby('education')['sale_flg'].mean().to_dict()\n",
-    "data['education_target_enc'] = data['education'].apply(lambda x: education_dict.get(x, 0.3))\n",
-    "data['education_target_enc']"
+    "for feature_1 in [f'feature_{i}'for i in range(1, 11)]:\n",
+    "    data[f'{feature_1} ** 2'] = data[feature_1] ** 2\n",
+    "    data[f'{feature_1} ** 0.5'] = data[feature_1] ** 0.5\n",
+    "    data[f'{feature_1} log'] = np.log(data[feature_1])"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 332,
-   "id": "80964568",
+   "execution_count": null,
+   "id": "aa2d80db",
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/pandas/core/arraylike.py:358: RuntimeWarning: divide by zero encountered in log\n",
-      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
-    "for feature_1 in [f'feature_{i}'for i in range(1, 11)]:\n",
-    "    data[f'{feature_1} ** 2'] = data[feature_1] ** 2\n",
-    "    data[f'{feature_1} log'] = np.log(data[feature_1])"
+    "from sklearn.cluster import KMeans\n",
+    "# Create cluster feature\n",
+    "kmeans = KMeans(n_clusters=3)\n",
+    "data['cluster'] = kmeans.fit_predict(data[[f'feature_{i}' for i in range(1, 11)]].fillna(0))\n",
+    "\n",
+    "joblib.dump(kmeans, OUTPUT_PATH / 'cluster' / f'kmeans.pkl')"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 333,
-   "id": "aa1ec95f",
+   "execution_count": null,
+   "id": "1c5d6af9",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -539,19 +490,10 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 334,
-   "id": "31f824be",
+   "execution_count": null,
+   "id": "cd95e4d7",
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "CPU times: user 4 µs, sys: 0 ns, total: 4 µs\n",
-      "Wall time: 6.91 µs\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "%%time\n",
     "# create features\n",
@@ -561,13 +503,18 @@
     "# data = create_features_balance(data)\n",
     "# data = create_features_client(data)\n",
     "# data = create_features_campaigns(data)\n",
-    "# data = create_features_payments(data)"
+    "# data = create_features_deals(data)\n",
+    "# data = create_features_dict_mcc(data)\n",
+    "# data = create_features_payments(data)\n",
+    "# data = create_features_appl(data)\n",
+    "# data = create_features_funnel(data)\n",
+    "# data = create_features_deals(data)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 335,
-   "id": "60fd41bf",
+   "execution_count": null,
+   "id": "1a35f216",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -580,8 +527,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 336,
-   "id": "a52de6e5",
+   "execution_count": null,
+   "id": "01757290",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -595,8 +542,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 306,
-   "id": "3b844903",
+   "execution_count": null,
+   "id": "c1340c98",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -605,8 +552,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 307,
-   "id": "19a3ed96",
+   "execution_count": null,
+   "id": "2e00e257",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -616,7 +563,7 @@
   },
   {
    "cell_type": "markdown",
-   "id": "dcd27bc4",
+   "id": "3cbfeca8",
    "metadata": {},
    "source": [
     "## Train"
@@ -624,8 +571,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 308,
-   "id": "33036994",
+   "execution_count": null,
+   "id": "69ea5eb1",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -639,8 +586,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 309,
-   "id": "567c29ec",
+   "execution_count": null,
+   "id": "b7a75c43",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -653,27 +600,23 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 310,
-   "id": "32e4742b",
+   "execution_count": null,
+   "id": "77e93bff",
    "metadata": {},
    "outputs": [],
    "source": [
+    "from lightgbm import LGBMRegressor\n",
     "def running_train(X_train, Y_train, X_val, Y_val, i_fold=None, seed=None, params = None):\n",
     "    # prepare for train\n",
     "    params = {\n",
-    "#           \"objective\": \"cross_entropy\",\n",
-    "#           \"boosting_type\": \"gbdt\",\n",
-    "#           \"learning_rate\": learning_rate,\n",
-    "#           \"num_leaves\": num_leaves,\n",
+    "# #           \"objective\": \"cross_entropy\",\n",
+    "#           \"num_leaves\": 256,\n",
     "#            \"max_bin\": 128,\n",
     "#           \"feature_fraction\": feature_fraction,\n",
-    "#           \"drop_rate\": 0.05,\n",
-    "#           \"is_unbalance\": True,\n",
-    "#           \"max_drop\": 20,\n",
     "#           \"min_child_samples\": 5,\n",
     "#           \"min_child_weight\": 50,\n",
-    "#           \"min_split_gain\": 0,\n",
-    "#           \"subsample\": 0.9,\n",
+    "#           \"min_split_gain\": 0.1,\n",
+    "#           \"subsample\": 0.7,\n",
     "          'n_jobs': -1,\n",
     "          'random_state': seed\n",
     "          }\n",
@@ -681,7 +624,7 @@
     "    params['random_state'] = seed\n",
     "    \n",
     "    \n",
-    "    model = LGBMClassifier(**params) # define model here\n",
+    "    model = LGBMRegressor(**params) # define model here\n",
     "    \n",
     "    # Fit and save model\n",
     "    \n",
@@ -694,472 +637,10 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 311,
-   "id": "f0704cbe",
+   "execution_count": null,
+   "id": "8fc5f0a9",
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Seed: 948, 1/5\n",
-      "# Fold: 1/5 (seed: 1/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 2/5 (seed: 1/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 3/5 (seed: 1/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 4/5 (seed: 1/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 5/5 (seed: 1/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "Seed: 534, 2/5\n",
-      "# Fold: 1/5 (seed: 2/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 2/5 (seed: 2/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 3/5 (seed: 2/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 4/5 (seed: 2/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 5/5 (seed: 2/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "Seed: 432, 3/5\n",
-      "# Fold: 1/5 (seed: 3/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 2/5 (seed: 3/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 3/5 (seed: 3/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 4/5 (seed: 3/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 5/5 (seed: 3/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "Seed: 597, 4/5\n",
-      "# Fold: 1/5 (seed: 4/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 2/5 (seed: 4/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 3/5 (seed: 4/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 4/5 (seed: 4/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 5/5 (seed: 4/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "Seed: 103, 5/5\n",
-      "# Fold: 1/5 (seed: 5/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 2/5 (seed: 5/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 3/5 (seed: 5/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 4/5 (seed: 5/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n",
-      "# Fold: 5/5 (seed: 5/5)\n"
-     ]
-    },
-    {
-     "name": "stderr",
-     "output_type": "stream",
-     "text": [
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
-      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
-      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
-      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "predict on oof...  done.\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "oof = np.zeros((X.shape[0], n_seed)) # cv_score\n",
     "seeds = []\n",
@@ -1191,7 +672,8 @@
     "        print('predict on oof...', end='')\n",
     "        model = joblib.load( OUTPUT_PATH / 'models' / f'lightgbm_{i_fold}_{seed}_{CURRENT_TIME}.pkl')\n",
     "\n",
-    "        prediction = model.predict_proba(X_val)[:, 1]\n",
+    "        #prediction = model.predict_proba(X_val)[:, 1]\n",
+    "        prediction = model.predict(X_val)\n",
     "\n",
     "        oof[val_idx, i_seed] = prediction\n",
     "        print('  done.')"
@@ -1199,8 +681,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 312,
-   "id": "d89a9d17",
+   "execution_count": 524,
+   "id": "fbeda563",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -1216,8 +698,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 313,
-   "id": "8771ecf4",
+   "execution_count": 525,
+   "id": "772d6ad6",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -1230,8 +712,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 314,
-   "id": "4e0d49a1",
+   "execution_count": 526,
+   "id": "8f7c47f9",
    "metadata": {},
    "outputs": [
     {
@@ -1271,17 +753,17 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 315,
-   "id": "85fd80ee",
+   "execution_count": 527,
+   "id": "fc628c1b",
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Public ANIC 5393.076904828363 Private ANIC 5723.073028886407\n",
-      "ANIC 5613.074320867059\n",
-      "Accuracy score: 0.828867801655968\n"
+      "Public ANIC 5338.866417806314 Private ANIC 5724.336927853753\n",
+      "ANIC 5595.84675783794\n",
+      "Accuracy score: 0.8215182807703042\n"
      ]
     }
    ],
@@ -1294,8 +776,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 316,
-   "id": "eac41034",
+   "execution_count": 403,
+   "id": "bbf35802",
    "metadata": {},
    "outputs": [
     {
@@ -1304,7 +786,7 @@
        "<AxesSubplot:title={'center':'Feature importance'}, xlabel='Feature importance', ylabel='Features'>"
       ]
      },
-     "execution_count": 316,
+     "execution_count": 403,
      "metadata": {},
      "output_type": "execute_result"
     },
@@ -1319,7 +801,7 @@
     },
     {
      "data": {
-      "image/png": "\n",
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -1339,21 +821,26 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 112,
-   "id": "28dd2f50",
+   "execution_count": 81,
+   "id": "7f5a33e4",
    "metadata": {},
    "outputs": [
     {
      "data": {
       "text/plain": [
-       "array(['city', 'feature_4', 'feature_6', 'feature_5', 'feature_9',\n",
-       "       'region', 'age', 'feature_3', 'feature_8', 'education',\n",
-       "       'client_segment', 'region_cd', 'feature_1', 'feature_2',\n",
-       "       'feature_10', 'feature_7', 'feature_4 log', 'gender',\n",
-       "       'feature_6 log', 'feature_5 log'], dtype=object)"
+       "array(['client_city', 'client_education', 'most_common_txn_city',\n",
+       "       'feature_9', 'feature_4', 'feature_6', 'feature_1', 'client_age',\n",
+       "       'client_segment', 'last_known_salary',\n",
+       "       'most_common_prod_type_name', 'mean_balance_rur_amt', 'feature_2',\n",
+       "       'total_share_max_bal_sum_rur', 'feature_3', 'mean_agr_flg',\n",
+       "       'most_common_tsp_name', 'max_agrmnt_rate_active',\n",
+       "       'mean_min_bal_sum_rur', 'feature_7', 'total_campaigns',\n",
+       "       'feature_8', 'client_region', 'total_prod_group_name',\n",
+       "       'total_balance', 'mean_otkaz', 'total_txn_city', 'feature_5',\n",
+       "       'total_share_tsp_name', 'mean_eop_bal_sum_rur'], dtype=object)"
       ]
      },
-     "execution_count": 112,
+     "execution_count": 81,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -1362,13 +849,13 @@
     "feature_importance = pd.DataFrame(np.array([list(X.columns),model.feature_importances_]).T)\n",
     "feature_importance.columns = ['column', 'importance']\n",
     "feature_importance['importance'] = feature_importance['importance'].map(int)\n",
-    "feature_importance.sort_values(by='importance', ascending = False).iloc[:20, 0].values"
+    "feature_importance.sort_values(by='importance', ascending = False).iloc[:30, 0].values"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 329,
-   "id": "f96f9923",
+   "id": "c0ca5c2f",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -1379,7 +866,7 @@
   {
    "cell_type": "code",
    "execution_count": 113,
-   "id": "c8cb267d",
+   "id": "3de98ab7",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -1391,7 +878,7 @@
   {
    "cell_type": "code",
    "execution_count": 117,
-   "id": "43dba8dd",
+   "id": "854eea06",
    "metadata": {},
    "outputs": [
     {
@@ -1411,7 +898,7 @@
   {
    "cell_type": "code",
    "execution_count": 118,
-   "id": "da440ce8",
+   "id": "19708450",
    "metadata": {},
    "outputs": [
     {
diff --git a/CatBoost.ipynb b/CatBoost.ipynb
index e326907..ddc374c 100644
--- a/CatBoost.ipynb
+++ b/CatBoost.ipynb
@@ -2,8 +2,8 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 139,
-   "id": "5fec58bb",
+   "execution_count": 1,
+   "id": "39c13ab9",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -57,8 +57,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 140,
-   "id": "9036ef4c",
+   "execution_count": 2,
+   "id": "68053fc8",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -75,8 +75,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 141,
-   "id": "fd31aa19",
+   "execution_count": 3,
+   "id": "0e6c2895",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -87,8 +87,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 142,
-   "id": "af8e9a96",
+   "execution_count": 4,
+   "id": "6bc98a25",
    "metadata": {},
    "outputs": [
     {
@@ -103,8 +103,8 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "CPU times: user 6.63 s, sys: 955 ms, total: 7.59 s\n",
-      "Wall time: 7.59 s\n"
+      "CPU times: user 9.61 s, sys: 843 ms, total: 10.5 s\n",
+      "Wall time: 10.6 s\n"
      ]
     }
    ],
@@ -125,17 +125,170 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 143,
-   "id": "51756245",
+   "execution_count": 5,
+   "id": "3db7db01",
    "metadata": {},
    "outputs": [],
    "source": [
     "payments = payments.sort_values(by='day_dt', ascending = False).reset_index(drop = True)"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": 17,
+   "id": "5e578b69",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "target = ((funnel['sale_flg'] * funnel['sale_amount'].fillna(0) - funnel['contacts'].fillna(0)*400/0.1) > -4000).astype(int)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 26,
+   "id": "e195b810",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "-8000.0"
+      ]
+     },
+     "execution_count": 26,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "np.quantile(target, 0.1)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 46,
+   "id": "2d143f53",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "-964.6999999999998"
+      ]
+     },
+     "execution_count": 46,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "np.quantile(target, 0.84)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 47,
+   "id": "6bdf5d41",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/pandas/core/indexing.py:1597: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  self.obj[key] = value\n",
+      "/opt/conda/lib/python3.7/site-packages/pandas/core/indexing.py:1720: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  self._setitem_single_column(loc, value, pi)\n",
+      "/opt/conda/lib/python3.7/site-packages/pandas/core/generic.py:5494: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  self[name] = value\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "6683.11812261606\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/home/jupyter/idao-2021-finals/scoring/scorer.py:63: SettingWithCopyWarning: \n",
+      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
+      "Try using .loc[row_indexer,col_indexer] = value instead\n",
+      "\n",
+      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
+      "  selected['gain'] = selected[SALE_FLAG] * selected[SALE_AMOUNT].fillna(0) - selected[CONTACTS] * CALL_COST\n"
+     ]
+    }
+   ],
+   "source": [
+    "Y_predicted = (target > np.quantile(target, 0.84)).astype(int).values\n",
+    "Y_test = funnel[['client_id', 'sale_flg']].set_index('client_id')\n",
+    "test_funnel =  funnel.set_index('client_id')\n",
+    "\n",
+    "public_score, private_score = local_scorer.get_score(test_funnel, Y_predicted, Y_test)\n",
+    "print(1/3*public_score + 2/3*private_score)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 34,
+   "id": "6d3372c3",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
+      "  warnings.warn(msg, FutureWarning)\n"
+     ]
+    },
+    {
+     "data": {
+      "text/plain": [
+       "<AxesSubplot:ylabel='Density'>"
+      ]
+     },
+     "execution_count": 34,
+     "metadata": {},
+     "output_type": "execute_result"
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "import seaborn as sns\n",
+    "sns.distplot(target)"
+   ]
+  },
   {
    "cell_type": "markdown",
-   "id": "8b76a7f7",
+   "id": "ac936bdf",
    "metadata": {},
    "source": [
     "## Data prep"
@@ -144,7 +297,7 @@
   {
    "cell_type": "code",
    "execution_count": 9,
-   "id": "a5ad8935",
+   "id": "0088ba1e",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -171,7 +324,7 @@
   {
    "cell_type": "code",
    "execution_count": 94,
-   "id": "254ffa17",
+   "id": "2aa560ee",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -479,7 +632,7 @@
   {
    "cell_type": "code",
    "execution_count": 160,
-   "id": "81aaa399",
+   "id": "92100280",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -491,7 +644,7 @@
   {
    "cell_type": "code",
    "execution_count": 161,
-   "id": "fd0c649c",
+   "id": "74195024",
    "metadata": {},
    "outputs": [
     {
@@ -517,7 +670,7 @@
   {
    "cell_type": "code",
    "execution_count": 162,
-   "id": "88d64701",
+   "id": "33714177",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -527,7 +680,7 @@
   {
    "cell_type": "code",
    "execution_count": 80,
-   "id": "dd3290d5",
+   "id": "760386e4",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -543,7 +696,7 @@
   {
    "cell_type": "code",
    "execution_count": null,
-   "id": "7d2b15c3",
+   "id": "2b622420",
    "metadata": {},
    "outputs": [],
    "source": []
@@ -551,7 +704,7 @@
   {
    "cell_type": "code",
    "execution_count": 198,
-   "id": "a5111f65",
+   "id": "a8c9a1d8",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -565,7 +718,7 @@
   {
    "cell_type": "code",
    "execution_count": 164,
-   "id": "1097e9c1",
+   "id": "f2c10c66",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -575,7 +728,7 @@
   },
   {
    "cell_type": "markdown",
-   "id": "735a4cd0",
+   "id": "3abddf15",
    "metadata": {},
    "source": [
     "## Train"
@@ -584,7 +737,7 @@
   {
    "cell_type": "code",
    "execution_count": 165,
-   "id": "1d134aa8",
+   "id": "a208fe5e",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -599,7 +752,7 @@
   {
    "cell_type": "code",
    "execution_count": 194,
-   "id": "c547428d",
+   "id": "78218e5e",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -613,7 +766,7 @@
   {
    "cell_type": "code",
    "execution_count": 190,
-   "id": "88712e80",
+   "id": "c7a5e00f",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -644,7 +797,7 @@
   {
    "cell_type": "code",
    "execution_count": 168,
-   "id": "4a5faed3",
+   "id": "d6cf3b9b",
    "metadata": {},
    "outputs": [
     {
@@ -716,7 +869,7 @@
   {
    "cell_type": "code",
    "execution_count": 177,
-   "id": "d0ebf80d",
+   "id": "58a14348",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -733,7 +886,7 @@
   {
    "cell_type": "code",
    "execution_count": 181,
-   "id": "e85a830c",
+   "id": "c18bed56",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -747,7 +900,7 @@
   {
    "cell_type": "code",
    "execution_count": 182,
-   "id": "d8139bd9",
+   "id": "9c15de36",
    "metadata": {},
    "outputs": [
     {
@@ -788,7 +941,7 @@
   {
    "cell_type": "code",
    "execution_count": 183,
-   "id": "2b60b816",
+   "id": "c665ef65",
    "metadata": {},
    "outputs": [
     {
@@ -811,7 +964,7 @@
   {
    "cell_type": "code",
    "execution_count": 191,
-   "id": "4268eb4f",
+   "id": "d016c55c",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -822,7 +975,7 @@
   {
    "cell_type": "code",
    "execution_count": 330,
-   "id": "fa93983d",
+   "id": "f61203ba",
    "metadata": {},
    "outputs": [
     {
@@ -846,7 +999,7 @@
   {
    "cell_type": "code",
    "execution_count": 100,
-   "id": "405ed949",
+   "id": "29045205",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -858,7 +1011,7 @@
   {
    "cell_type": "code",
    "execution_count": 101,
-   "id": "3676d530",
+   "id": "a02a0132",
    "metadata": {},
    "outputs": [
     {
diff --git a/wandb/latest-run b/wandb/latest-run
index 78ad42d..ded1708 120000
--- a/wandb/latest-run
+++ b/wandb/latest-run
@@ -1 +1 @@
-run-20210417_210200-1iwwtpsn
\ No newline at end of file
+run-20210418_070730-2ge2len5
\ No newline at end of file
