diff --git a/Baseline.ipynb b/Baseline.ipynb
index 1746168..97d84af 100644
--- a/Baseline.ipynb
+++ b/Baseline.ipynb
@@ -3,7 +3,7 @@
   {
    "cell_type": "code",
    "execution_count": 1,
-   "id": "01fa0131",
+   "id": "7fbd56e1",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -19,12 +19,14 @@
     "import os\n",
     "import random\n",
     "import joblib\n",
+    "import shutil\n",
     "\n",
     "from sklearn.model_selection import KFold\n",
     "from sklearn.model_selection import train_test_split\n",
     "from sklearn.metrics import accuracy_score\n",
     "from sklearn.preprocessing import LabelEncoder\n",
     "from scoring import local_scorer\n",
+    "import scipy\n",
     "\n",
     "from lightgbm import LGBMClassifier\n",
     "\n",
@@ -53,8 +55,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 151,
-   "id": "32c5f64d",
+   "execution_count": 2,
+   "id": "f2947251",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -62,16 +64,17 @@
     "# Config\n",
     "###############\n",
     "\n",
-    "n_seed = 3\n",
-    "n_fold = 3\n",
+    "n_seed = 5\n",
+    "n_fold = 5\n",
     "prediction_threshold = 0.2\n",
-    "retrain_after_valid = True"
+    "retrain_after_valid = True\n",
+    "make_submission = False"
    ]
   },
   {
    "cell_type": "code",
    "execution_count": 3,
-   "id": "a2e1037e",
+   "id": "d1c43e15",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -83,7 +86,7 @@
   {
    "cell_type": "code",
    "execution_count": 4,
-   "id": "2aa8d28b",
+   "id": "e1baf37f",
    "metadata": {},
    "outputs": [
     {
@@ -98,8 +101,8 @@
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "CPU times: user 6.58 s, sys: 1.17 s, total: 7.75 s\n",
-      "Wall time: 7.75 s\n"
+      "CPU times: user 6.54 s, sys: 1.68 s, total: 8.22 s\n",
+      "Wall time: 8.21 s\n"
      ]
     }
    ],
@@ -120,8 +123,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
-   "id": "53f871ee",
+   "execution_count": 5,
+   "id": "56b418de",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -130,7 +133,7 @@
   },
   {
    "cell_type": "markdown",
-   "id": "5b72babd",
+   "id": "fe71cac2",
    "metadata": {},
    "source": [
     "## Data prep"
@@ -138,329 +141,295 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 197,
-   "id": "e68e424b",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/html": [
-       "<div>\n",
-       "<style scoped>\n",
-       "    .dataframe tbody tr th:only-of-type {\n",
-       "        vertical-align: middle;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe tbody tr th {\n",
-       "        vertical-align: top;\n",
-       "    }\n",
-       "\n",
-       "    .dataframe thead th {\n",
-       "        text-align: right;\n",
-       "    }\n",
-       "</style>\n",
-       "<table border=\"1\" class=\"dataframe\">\n",
-       "  <thead>\n",
-       "    <tr style=\"text-align: right;\">\n",
-       "      <th></th>\n",
-       "      <th>client_id</th>\n",
-       "      <th>agrmnt_start_dt</th>\n",
-       "      <th>agrmnt_close_dt</th>\n",
-       "      <th>crncy_cd</th>\n",
-       "      <th>agrmnt_rate_active</th>\n",
-       "      <th>agrmnt_rate_passive</th>\n",
-       "      <th>agrmnt_sum_rur</th>\n",
-       "      <th>prod_type_name</th>\n",
-       "    </tr>\n",
-       "  </thead>\n",
-       "  <tbody>\n",
-       "    <tr>\n",
-       "      <th>0</th>\n",
-       "      <td>7513301859607023584</td>\n",
-       "      <td>2010-08-12</td>\n",
-       "      <td>2014-10-30</td>\n",
-       "      <td>810.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>Cash on demand</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>1</th>\n",
-       "      <td>7513301859607023584</td>\n",
-       "      <td>2013-02-15</td>\n",
-       "      <td>2013-08-16</td>\n",
-       "      <td>810.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>Cash on demand</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>2</th>\n",
-       "      <td>7513301859607023584</td>\n",
-       "      <td>2013-08-16</td>\n",
-       "      <td>2014-02-14</td>\n",
-       "      <td>810.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>Cash on demand</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>3</th>\n",
-       "      <td>7513301859607023584</td>\n",
-       "      <td>2015-07-12</td>\n",
-       "      <td>2015-07-12</td>\n",
-       "      <td>810.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>Cash on demand</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>4</th>\n",
-       "      <td>7513301859607023584</td>\n",
-       "      <td>2015-07-12</td>\n",
-       "      <td>2015-07-12</td>\n",
-       "      <td>810.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>Cash on demand</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>...</th>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "      <td>...</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>109011</th>\n",
-       "      <td>-8242641659611256965</td>\n",
-       "      <td>2011-08-10</td>\n",
-       "      <td>2011-08-10</td>\n",
-       "      <td>810.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>POST OFFICE</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>109012</th>\n",
-       "      <td>-8242641659611256965</td>\n",
-       "      <td>2011-08-10</td>\n",
-       "      <td>2018-07-03</td>\n",
-       "      <td>810.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>3.25</td>\n",
-       "      <td>13089.0</td>\n",
-       "      <td>POST OFFICE</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>109013</th>\n",
-       "      <td>-8242641659611256965</td>\n",
-       "      <td>2011-08-10</td>\n",
-       "      <td>2011-08-10</td>\n",
-       "      <td>810.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>0.0</td>\n",
-       "      <td>POST OFFICE</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>109014</th>\n",
-       "      <td>-8242641659611256965</td>\n",
-       "      <td>2011-08-23</td>\n",
-       "      <td>2012-09-18</td>\n",
-       "      <td>810.0</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>7.00</td>\n",
-       "      <td>5403.0</td>\n",
-       "      <td>POST OFFICE</td>\n",
-       "    </tr>\n",
-       "    <tr>\n",
-       "      <th>109015</th>\n",
-       "      <td>-4636514022054340174</td>\n",
-       "      <td>2014-06-09</td>\n",
-       "      <td>2017-07-31</td>\n",
-       "      <td>810.0</td>\n",
-       "      <td>18.75</td>\n",
-       "      <td>NaN</td>\n",
-       "      <td>3299986.0</td>\n",
-       "      <td>Mortgage plus</td>\n",
-       "    </tr>\n",
-       "  </tbody>\n",
-       "</table>\n",
-       "<p>109016 rows Ã— 8 columns</p>\n",
-       "</div>"
-      ],
-      "text/plain": [
-       "                  client_id agrmnt_start_dt agrmnt_close_dt  crncy_cd  \\\n",
-       "0       7513301859607023584      2010-08-12      2014-10-30     810.0   \n",
-       "1       7513301859607023584      2013-02-15      2013-08-16     810.0   \n",
-       "2       7513301859607023584      2013-08-16      2014-02-14     810.0   \n",
-       "3       7513301859607023584      2015-07-12      2015-07-12     810.0   \n",
-       "4       7513301859607023584      2015-07-12      2015-07-12     810.0   \n",
-       "...                     ...             ...             ...       ...   \n",
-       "109011 -8242641659611256965      2011-08-10      2011-08-10     810.0   \n",
-       "109012 -8242641659611256965      2011-08-10      2018-07-03     810.0   \n",
-       "109013 -8242641659611256965      2011-08-10      2011-08-10     810.0   \n",
-       "109014 -8242641659611256965      2011-08-23      2012-09-18     810.0   \n",
-       "109015 -4636514022054340174      2014-06-09      2017-07-31     810.0   \n",
-       "\n",
-       "        agrmnt_rate_active  agrmnt_rate_passive  agrmnt_sum_rur  \\\n",
-       "0                      NaN                  NaN             0.0   \n",
-       "1                      NaN                  NaN             0.0   \n",
-       "2                      NaN                  NaN             0.0   \n",
-       "3                      NaN                  NaN             0.0   \n",
-       "4                      NaN                  NaN             0.0   \n",
-       "...                    ...                  ...             ...   \n",
-       "109011                 NaN                  NaN             0.0   \n",
-       "109012                 NaN                 3.25         13089.0   \n",
-       "109013                 NaN                  NaN             0.0   \n",
-       "109014                 NaN                 7.00          5403.0   \n",
-       "109015               18.75                  NaN       3299986.0   \n",
-       "\n",
-       "        prod_type_name  \n",
-       "0       Cash on demand  \n",
-       "1       Cash on demand  \n",
-       "2       Cash on demand  \n",
-       "3       Cash on demand  \n",
-       "4       Cash on demand  \n",
-       "...                ...  \n",
-       "109011     POST OFFICE  \n",
-       "109012     POST OFFICE  \n",
-       "109013     POST OFFICE  \n",
-       "109014     POST OFFICE  \n",
-       "109015   Mortgage plus  \n",
-       "\n",
-       "[109016 rows x 8 columns]"
-      ]
-     },
-     "execution_count": 197,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "deals"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 198,
-   "id": "3b3d432f",
+   "execution_count": 401,
+   "id": "1cc120ab",
    "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "client_id\n",
-       "-9221941791080978530    0.000000e+00\n",
-       "-9220369594510368140    6.634224e+07\n",
-       "-9220236243053692422    0.000000e+00\n",
-       "-9220233431709087652    9.242713e+04\n",
-       "-9219699286371310531    0.000000e+00\n",
-       "                            ...     \n",
-       " 9218801691173598782    2.723500e+03\n",
-       " 9219024469308275500    0.000000e+00\n",
-       " 9219968212912398941    0.000000e+00\n",
-       " 9220335314469087849    9.004667e+03\n",
-       " 9223107459698100059    0.000000e+00\n",
-       "Name: agrmnt_sum_rur, Length: 18652, dtype: float64"
-      ]
-     },
-     "execution_count": 198,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
+   "outputs": [],
    "source": [
-    "deals.groupby('client_id')['agrmnt_sum_rur'].mean()"
+    "# transactions['mcc_cd'] = transactions['mcc_cd'].fillna(-2)\n",
+    "# transactions['txn_city'] = transactions['txn_city'].fillna('<UNK>')\n",
+    "# transactions['tsp_name'] = transactions['tsp_name'].fillna('<UNK>')\n",
+    "# transactions['txn_comment_2'] = transactions['txn_comment_2'].fillna('<UNK>')\n",
+    "\n",
+    "# balance['crncy_cd'] = balance['crncy_cd'].fillna(-2)\n",
+    "# balance['prod_cat_name'] = balance['prod_cat_name'].fillna('<UNK>')\n",
+    "# balance['prod_group_name'] = balance['prod_group_name'].fillna('<UNK>')\n",
+    "\n",
+    "\n",
+    "# client = client.rename(columns={\n",
+    "#     'gender': 'client_gender',\n",
+    "#     'age': 'client_age',\n",
+    "#     'region': 'client_region',\n",
+    "#     'city': 'client_city',\n",
+    "#     'citizenship': 'client_citizenship',\n",
+    "#     'education': 'client_education',\n",
+    "#     'job_type': 'client_job_type'\n",
+    "# })\n",
+    "# campaigns['prod'] = campaigns['prod'].fillna('<UNK>')"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 199,
-   "id": "04fb0df4",
+   "execution_count": 6,
+   "id": "71d94f85",
    "metadata": {},
    "outputs": [],
    "source": [
     "def most_common(x, default='unknown'):\n",
     "    try:\n",
-    "        return x.value_counts().index[0] \n",
+    "        # works faster then value_counts and pd.Series.mode\n",
+    "        return scipy.stats.mode(x)[0][0]\n",
     "    except: \n",
     "        return default\n",
     "\n",
     "\n",
+    "def get_feature_total(df, col_name):\n",
+    "    return data['client_id'].map(df.groupby(['client_id', col_name]).size().index.get_level_values('client_id').value_counts()).fillna(0)\n",
+    "\n",
+    "\n",
+    "def get_feature_most_common(df, col_name, fill_na_value):\n",
+    "    return data['client_id'].map(df.groupby('client_id')[col_name].agg(lambda x: scipy.stats.mode(x)[0][0])).fillna(fill_na_value)\n",
+    "\n",
+    "\n",
+    "def get_feature_mean(df, col_name, fill_na_value):\n",
+    "    return data['client_id'].map(df.groupby('client_id')[col_name].mean()).fillna(fill_na_value)\n",
+    "\n",
+    "\n",
+    "def get_feature_std(df, col_name, fill_na_value):\n",
+    "    return data['client_id'].map(df.groupby('client_id')[col_name].std()).fillna(fill_na_value)\n",
+    "\n",
+    "\n",
+    "def get_feature_max_min(df, col_name, fill_na_value):\n",
+    "    return data['client_id'].map(df.groupby('client_id')[col_name].agg(lambda x: x.max() - x.min())).fillna(fill_na_value)\n",
+    "\n",
+    "\n",
     "def create_features_transactions(data):\n",
     "    \n",
     "    data = data.copy()\n",
     "    \n",
     "    # transaction features\n",
-    "    data['cards_count'] = data['client_id'].map(transactions.groupby('client_id')['card_id'].count()).fillna(0)\n",
-    "    data['total_transaction_amount'] = data['client_id'].map(transactions.groupby('client_id')['tran_amt_rur'].sum()).fillna(0) # add monthly, daily, etc\n",
-    "    data['mean_transaction_amount'] = data['client_id'].map(transactions.groupby('client_id')['tran_amt_rur'].mean()).fillna(0) # add monthly, daily, etc\n",
-    "    data['std_transaction_amount'] = data['client_id'].map(transactions.groupby('client_id')['tran_amt_rur'].std()).fillna(0) # add monthly, daily, etc\n",
+    "    data['total_transactions'] = data['client_id'].map(transactions.groupby('client_id').size()).fillna(0)\n",
+    "    data['total_cards'] = get_feature_total(transactions, 'card_id')\n",
+    "\n",
+    "#     data['total_transaction_amount'] = data['client_id'].map(transactions.groupby('client_id')['tran_amt_rur'].sum()).fillna(0) # add monthly, daily, etc\n",
+    "    data['mean_transaction_amt'] = get_feature_mean(transactions, 'tran_amt_rur', -1) # add monthly, daily, etc\n",
+    "    data['std_transaction_amount'] = get_feature_std(transactions, 'tran_amt_rur', -1) # add monthly, daily, etc\n",
+    "    \n",
+    "    data['total_mcc_cd'] = get_feature_total(transactions, 'mcc_cd')\n",
+    "    data['total_share_mcc_cd'] = (data['total_mcc_cd'] / data['total_transactions']).fillna(0)\n",
+    "    data['most_common_mcc_cd'] = get_feature_most_common(transactions, 'mcc_cd', -1)\n",
+    "    \n",
+    "    data['total_merchant_cd'] = get_feature_total(transactions, 'merchant_cd')\n",
+    "    data['total_share_merchant_cd'] = (data['total_merchant_cd'] / data['total_transactions']).fillna(0)\n",
+    "    data['most_common_merchant_cd'] = get_feature_most_common(transactions, 'merchant_cd', -1)\n",
+    "    \n",
+    "    data['total_txn_city'] = get_feature_total(transactions, 'txn_city')\n",
+    "    data['total_share_txn_city'] = (data['total_txn_city'] / data['total_transactions']).fillna(0)\n",
+    "    data['most_common_txn_city'] = get_feature_most_common(transactions, 'txn_city', '<unknown>')\n",
     "    \n",
-    "    data['most_common_mcc_cd'] = data['client_id'].map(transactions.groupby('client_id')['mcc_cd'].agg(lambda x:most_common(x))).fillna(-1)\n",
-    "    data['most_common_txn_comment_1'] = data['client_id'].map(transactions.groupby('client_id')['txn_comment_1'].agg(lambda x:most_common(x, 'unknown'))).fillna('unknown')\n",
-    "    data['most_common_txn_city'] = data['client_id'].map(transactions.groupby('client_id')['txn_city'].agg(lambda x: most_common(x, 'unknown'))).fillna('unknown')\n",
-    "    data['most_common_txn_country'] = data['client_id'].map(transactions.groupby('client_id')['txn_country'].agg(lambda x:most_common(x, 'unknown'))).fillna('unknown')\n",
+    "    data['total_tsp_name'] = get_feature_total(transactions, 'tsp_name')\n",
+    "    data['total_share_tsp_name'] = (data['total_tsp_name'] / data['total_transactions']).fillna(0)\n",
+    "    data['most_common_tsp_name'] = get_feature_most_common(transactions, 'tsp_name', '<unknown>')\n",
     "    \n",
-    "    data['number_of_transaction_countries'] = data['client_id'].map(transactions.groupby('client_id')['txn_city'].agg(lambda x:x.value_counts().shape[0]))\n",
-    "    data['number_of_transaction_cities'] = data['client_id'].map(transactions.groupby('client_id')['txn_country'].agg(lambda x:x.value_counts().shape[0]))\n",
+    "    data['total_txn_comment_1'] = get_feature_total(transactions, 'txn_comment_1')\n",
+    "    data['most_common_txn_comment_1'] = get_feature_most_common(transactions, 'txn_comment_1', '<unknown>')\n",
+    "    \n",
+    "    data['total_txn_comment_2'] = get_feature_total(transactions, 'txn_comment_2')\n",
+    "    data['most_common_txn_comment_2'] = get_feature_most_common(transactions, 'txn_comment_2', '<unknown>')\n",
     "    \n",
     "    return data\n",
     "\n",
-    "def create_feautures_payments(data):\n",
+    "\n",
+    "def create_features_aum(data):\n",
     "    data = data.copy()\n",
     "    \n",
-    "    # payments \n",
-    "    data['last_known_salary'] = data['client_id'].map(payments.groupby('client_id').apply(lambda x: x['sum_rur'].iloc[0])).fillna(-1)\n",
-    "    data['total_recieved_salary'] = data['client_id'].map(payments.groupby('client_id').apply(lambda x: x['sum_rur'].sum())).fillna(-1)\n",
+    "    data['total_aum'] = data['client_id'].map(assets_under_management.groupby('client_id').size()).fillna(0)\n",
+    "    \n",
+    "    data['total_product_code'] = get_feature_total(assets_under_management, 'product_code')\n",
+    "    data['most_common_product_code'] = get_feature_most_common(assets_under_management, 'product_code', '<unknown>').value_counts()\n",
+    "    \n",
+    "    data['mean_balance_rur_amt'] = get_feature_mean(assets_under_management, 'balance_rur_amt', -1)\n",
+    "    data['std_balance_rur_amt'] = get_feature_std(assets_under_management, 'balance_rur_amt', -1)\n",
+    "    data['max_min_balance_rur_amt'] = get_feature_max_min(assets_under_management, 'balance_rur_amt', -1)\n",
+    "    \n",
+    "    return data\n",
+    "\n",
+    "\n",
+    "def create_features_balance(data):\n",
+    "    data = data.copy()\n",
+    "    \n",
+    "    data['total_balance'] = data['client_id'].map(balance.groupby('client_id').size()).fillna(0)\n",
+    "    \n",
+    "    data['total_crncy_cd'] = get_feature_total(balance, 'crncy_cd')\n",
+    "    data['most_common_crncy_cd'] = get_feature_most_common(balance, 'crncy_cd', -1)\n",
+    "    \n",
+    "    data['total_eop_bal_sum_rur'] = get_feature_total(balance, 'eop_bal_sum_rur')\n",
+    "    data['total_share_eop_bal_sum_rur'] = (data['total_eop_bal_sum_rur'] / data['total_balance']).fillna(0)\n",
+    "    data['mean_eop_bal_sum_rur'] = get_feature_mean(balance, 'eop_bal_sum_rur', -9999)\n",
+    "    data['std_eop_bal_sum_rur'] = get_feature_std(balance, 'eop_bal_sum_rur', -9999)\n",
+    "    \n",
+    "    data['total_min_bal_sum_rur'] = get_feature_total(balance, 'min_bal_sum_rur')\n",
+    "    data['total_share_min_bal_sum_rur'] = (data['total_min_bal_sum_rur'] / data['total_balance']).fillna(0)\n",
+    "    data['mean_min_bal_sum_rur'] = get_feature_mean(balance, 'min_bal_sum_rur', -9999)\n",
+    "    data['std_min_bal_sum_rur'] = get_feature_std(balance, 'min_bal_sum_rur', -9999)\n",
+    "    \n",
+    "    data['total_max_bal_sum_rur'] = get_feature_total(balance, 'max_bal_sum_rur')\n",
+    "    data['total_share_max_bal_sum_rur'] = (data['total_max_bal_sum_rur'] / data['total_balance']).fillna(0)\n",
+    "    data['mean_max_bal_sum_rur'] = get_feature_mean(balance, 'max_bal_sum_rur', -9999)\n",
+    "    data['std_max_bal_sum_rur'] = get_feature_std(balance, 'max_bal_sum_rur', -9999)\n",
+    "    \n",
+    "    data['total_avg_bal_sum_rur'] = get_feature_total(balance, 'avg_bal_sum_rur')\n",
+    "    data['total_share_avg_bal_sum_rur'] = (data['total_avg_bal_sum_rur'] / data['total_balance']).fillna(0)\n",
+    "    data['mean_avg_bal_sum_rur'] = get_feature_mean(balance, 'avg_bal_sum_rur', -9999)\n",
+    "    data['std_avg_bal_sum_rur'] = get_feature_std(balance, 'avg_bal_sum_rur', -9999)\n",
+    "    data['max_min_avg_bal_sum_rur'] = get_feature_max_min(balance, 'avg_bal_sum_rur', -9999)\n",
+    "    \n",
+    "    data['total_prod_cat_name'] = get_feature_total(balance, 'prod_cat_name')\n",
+    "    data['most_common_prod_cat_name'] = get_feature_most_common(balance, 'prod_cat_name', '<unknown>')\n",
+    "    \n",
+    "    data['total_prod_group_name'] = get_feature_total(balance, 'prod_group_name')\n",
+    "    data['most_common_prod_group_name'] = get_feature_most_common(balance, 'prod_group_name', '<unknown>')\n",
+    "    \n",
+    "    return data\n",
+    "\n",
+    "\n",
+    "def create_features_client(data):\n",
+    "    data = data.copy()\n",
+    "    \n",
+    "    data['match_client_region-region_cd'] = (data['client_region'] == data['region_cd']).astype(int)\n",
+    "    data.drop('client_citizenship', axis=1)\n",
+    "    \n",
+    "    return data\n",
+    "\n",
+    "\n",
+    "def create_features_campaigns(data):\n",
+    "    data = data.copy()\n",
+    "    \n",
+    "    data['total_campaigns'] = data['client_id'].map(campaigns.groupby('client_id').size()).fillna(0)\n",
+    "    \n",
+    "    data['total_agr_flg'] = get_feature_total(campaigns, 'agr_flg')\n",
+    "    data['mean_agr_flg'] = get_feature_mean(campaigns, 'agr_flg', -1)\n",
+    "    \n",
+    "    data['total_otkaz'] = get_feature_total(campaigns, 'otkaz')\n",
+    "    data['mean_otkaz'] = get_feature_mean(campaigns, 'otkaz', -1)\n",
+    "    \n",
+    "    data['total_dumaet'] = get_feature_total(campaigns, 'dumaet')\n",
+    "    data['mean_dumaet'] = get_feature_mean(campaigns, 'dumaet', -1)\n",
+    "    \n",
+    "    data['total_ring_up_flg'] = get_feature_total(campaigns, 'ring_up_flg')\n",
+    "    data['most_common_ring_up_flg'] = get_feature_most_common(campaigns, 'ring_up_flg', -1)\n",
+    "    \n",
+    "    data['total_count_comm'] = get_feature_total(campaigns, 'count_comm')\n",
+    "    data['most_common_count_comm'] = get_feature_most_common(campaigns, 'count_comm', -1)\n",
+    "    \n",
+    "    data['total_channel'] = get_feature_total(campaigns, 'channel')\n",
+    "    data['most_common_channel'] = get_feature_most_common(campaigns, 'channel', '<unknown>')\n",
+    "    \n",
+    "    data['total_prod'] = get_feature_total(campaigns, 'prod')\n",
+    "    data['most_common_prod'] = get_feature_most_common(campaigns, 'prod', '<unknown>')\n",
     "    \n",
     "    return data\n",
     "\n",
+    "\n",
     "def create_features_deals(data):\n",
     "    data = data.copy()\n",
     "    \n",
     "    data['number_of_deals'] = data['client_id'].map(deals.groupby('client_id')['crncy_cd'].count()).fillna(0)\n",
     "    data['mean_deal_sum'] = data['client_id'].map(deals.groupby('client_id')['agrmnt_sum_rur'].mean()).fillna(0)\n",
     "    \n",
+    "    return data\n",
+    "\n",
+    "\n",
+    "def create_features_dict_mcc(data):\n",
+    "    data = data.copy()\n",
+    "    \n",
+    "    return data\n",
+    "\n",
+    "\n",
+    "def create_features_payments(data):\n",
+    "    data = data.copy()\n",
+    "    \n",
+    "    # payments \n",
+    "    data['last_known_salary'] = data['client_id'].map(payments.groupby('client_id').apply(lambda x: x['sum_rur'].iloc[0])).fillna(-1)\n",
+    "    data['total_recieved_salary'] = data['client_id'].map(payments.groupby('client_id').apply(lambda x: x['sum_rur'].sum())).fillna(-1)\n",
+    "    \n",
+    "    return data\n",
+    "\n",
+    "\n",
+    "def create_features_appl(data):\n",
+    "    data = data.copy()\n",
+    "    \n",
+    "    return data\n",
+    "\n",
+    "\n",
+    "def create_features_funnel(data):\n",
+    "    data = data.copy()\n",
+    "    \n",
     "    return data"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 200,
-   "id": "f4f41918",
+   "execution_count": 68,
+   "id": "0135f0ae",
    "metadata": {},
    "outputs": [],
    "source": [
     "# data merge\n",
-    "\n",
+    "data = funnel.copy()\n",
     "data = funnel.merge(client, on=['client_id'])"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 201,
-   "id": "7ec45aaa",
+   "execution_count": 69,
+   "id": "edf8461d",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/pandas/core/arraylike.py:358: RuntimeWarning: divide by zero encountered in log\n",
+      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n"
+     ]
+    }
+   ],
+   "source": [
+    "for feature_1 in [f'feature_{i}'for i in range(1, 11)]:\n",
+    "    data[f'{feature_1} ** 2'] = data[feature_1] ** 2\n",
+    "    data[f'{feature_1} ** 0.5'] = data[feature_1] ** 0.5\n",
+    "    data[f'{feature_1} log'] = np.log(data[feature_1])"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 26,
+   "id": "e6ef84d3",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "for feature_1 in [f'feature_{i}'for i in range(1, 11)]:\n",
+    "    for feature_2 in [f'feature_{i}'for i in range(1, 11)]:\n",
+    "        if feature_1 != feature_2:\n",
+    "            data[f'{feature_1} + {feature_2}'] = data[feature_1] + data[feature_2]\n",
+    "            data[f'{feature_1} * {feature_2}'] = data[feature_1] * data[feature_2]\n",
+    "            data[f'{feature_1} / {feature_2}'] = data[feature_1] / data[feature_2]\n",
+    "            data[f'{feature_1} - {feature_2}'] = data[feature_1] - data[feature_2]"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 70,
+   "id": "74e8d1e9",
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "CPU times: user 38 s, sys: 196 ms, total: 38.2 s\n",
-      "Wall time: 38.1 s\n"
+      "CPU times: user 7 Âµs, sys: 0 ns, total: 7 Âµs\n",
+      "Wall time: 47.7 Âµs\n"
      ]
     }
    ],
@@ -468,40 +437,57 @@
     "%%time\n",
     "# create features\n",
     "\n",
-    "data = create_features_transactions(data)\n",
-    "data = create_feautures_payments(data)"
+    "# data = create_features_transactions(data)\n",
+    "# data = create_features_aum(data)\n",
+    "# data = create_features_balance(data)\n",
+    "# data = create_features_client(data)\n",
+    "# data = create_features_campaigns(data)\n",
+    "# data = create_features_payments(data)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 212,
-   "id": "879628ba",
+   "execution_count": 71,
+   "id": "bdcbfca6",
    "metadata": {},
    "outputs": [],
    "source": [
-    "data = create_features_deals(data)"
+    "try:\n",
+    "    os.mkdir(OUTPUT_PATH / 'preprocessors')\n",
+    "except:\n",
+    "    shutil.rmtree(OUTPUT_PATH / 'preprocessors')\n",
+    "    os.mkdir(OUTPUT_PATH / 'preprocessors')"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 213,
-   "id": "bf6b5886",
+   "execution_count": 72,
+   "id": "f9f5e017",
    "metadata": {},
    "outputs": [],
    "source": [
     "# data encode\n",
     "\n",
-    "le = LabelEncoder()\n",
-    "fill_cols = ['gender', 'citizenship', 'education', 'job_type', 'most_common_txn_comment_1', 'most_common_txn_city', 'most_common_txn_country']\n",
-    "for col in fill_cols:\n",
-    "    data[col] = le.fit_transform(data[col].astype(str))\n",
-    "    joblib.dump(le, OUTPUT_PATH / 'preprocessors' / f'{col}.pkl')"
+    "for c in data.columns:\n",
+    "    col_type = data[c].dtype\n",
+    "    if col_type == 'object' or col_type.name == 'category':\n",
+    "        data[c] = data[c].astype('category')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 73,
+   "id": "4a807450",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "TARGET_COLUMNS =  ['sale_flg', 'sale_amount', 'contacts']"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 214,
-   "id": "3b7b4e1b",
+   "execution_count": 74,
+   "id": "c4d6b7d6",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -511,7 +497,7 @@
   },
   {
    "cell_type": "markdown",
-   "id": "a3e970ff",
+   "id": "d110cb0f",
    "metadata": {},
    "source": [
     "## Train"
@@ -519,8 +505,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 215,
-   "id": "946efecc",
+   "execution_count": 75,
+   "id": "45fcce6d",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -529,29 +515,51 @@
     "    os.mkdir(OUTPUT_PATH / 'models')\n",
     "except:\n",
     "    shutil.rmtree(OUTPUT_PATH / 'models')\n",
-    "    os.mkdir(OUTPUT_PATH / 'models')\n",
-    "    \n",
-    "try:\n",
-    "    os.mkdir(OUTPUT_PATH / 'preprocessors')\n",
-    "except:\n",
-    "    shutil.rmtree(OUTPUT_PATH / 'preprocessors')\n",
-    "    os.mkdir(OUTPUT_PATH / 'preprocessors')"
+    "    os.mkdir(OUTPUT_PATH / 'models')"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 76,
+   "id": "6e2b6c1c",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "learning_rate = 0.5\n",
+    "num_leaves = 50\n",
+    "min_data_in_leaf = 1000\n",
+    "feature_fraction = 0.9\n",
+    "num_boost_round = 3000"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 216,
-   "id": "3b58eae9",
+   "execution_count": 77,
+   "id": "2105f0f4",
    "metadata": {},
    "outputs": [],
    "source": [
     "def running_train(X_train, Y_train, X_val, Y_val, i_fold=None, seed=None, params = None):\n",
     "    # prepare for train\n",
-    "    \n",
     "    params = {\n",
-    "              \"n_jobs\":-1,\n",
-    "              \"random_state\": seed\n",
-    "              }\n",
+    "#           \"objective\": \"cross_entropy\",\n",
+    "#           \"boosting_type\": \"gbdt\",\n",
+    "#           \"learning_rate\": learning_rate,\n",
+    "#           \"num_leaves\": num_leaves,\n",
+    "#            \"max_bin\": 128,\n",
+    "#           \"feature_fraction\": feature_fraction,\n",
+    "#           \"drop_rate\": 0.05,\n",
+    "#           \"is_unbalance\": True,\n",
+    "#           \"max_drop\": 20,\n",
+    "#           \"min_child_samples\": 5,\n",
+    "#           \"min_child_weight\": 50,\n",
+    "#           \"min_split_gain\": 0,\n",
+    "#           \"subsample\": 0.9,\n",
+    "          'n_jobs': -1,\n",
+    "          'random_state': seed\n",
+    "          }\n",
+    "    \n",
+    "    params['random_state'] = seed\n",
     "    \n",
     "    \n",
     "    model = LGBMClassifier(**params) # define model here\n",
@@ -567,40 +575,474 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 217,
-   "id": "2e32bdc6",
+   "execution_count": 78,
+   "id": "c2dc3c8f",
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Seed: 948, 1/3\n",
-      "# Fold: 1/3 (seed: 1/3)\n",
-      "predict on oof...  done.\n",
-      "# Fold: 2/3 (seed: 1/3)\n",
+      "Seed: 948, 1/5\n",
+      "# Fold: 1/5 (seed: 1/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
       "predict on oof...  done.\n",
-      "# Fold: 3/3 (seed: 1/3)\n",
+      "# Fold: 2/5 (seed: 1/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
       "predict on oof...  done.\n",
-      "Seed: 534, 2/3\n",
-      "# Fold: 1/3 (seed: 2/3)\n",
+      "# Fold: 3/5 (seed: 1/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
       "predict on oof...  done.\n",
-      "# Fold: 2/3 (seed: 2/3)\n",
+      "# Fold: 4/5 (seed: 1/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
       "predict on oof...  done.\n",
-      "# Fold: 3/3 (seed: 2/3)\n",
+      "# Fold: 5/5 (seed: 1/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
       "predict on oof...  done.\n",
-      "Seed: 432, 3/3\n",
-      "# Fold: 1/3 (seed: 3/3)\n",
+      "Seed: 534, 2/5\n",
+      "# Fold: 1/5 (seed: 2/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
       "predict on oof...  done.\n",
-      "# Fold: 2/3 (seed: 3/3)\n",
+      "# Fold: 2/5 (seed: 2/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
       "predict on oof...  done.\n",
-      "# Fold: 3/3 (seed: 3/3)\n",
-      "predict on oof...  done.\n"
+      "# Fold: 3/5 (seed: 2/5)\n"
      ]
-    }
-   ],
-   "source": [
-    "oof = np.zeros((X.shape[0], n_seed)) # cv_score\n",
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "predict on oof...  done.\n",
+      "# Fold: 4/5 (seed: 2/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "predict on oof...  done.\n",
+      "# Fold: 5/5 (seed: 2/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "predict on oof...  done.\n",
+      "Seed: 432, 3/5\n",
+      "# Fold: 1/5 (seed: 3/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "predict on oof...  done.\n",
+      "# Fold: 2/5 (seed: 3/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "predict on oof...  done.\n",
+      "# Fold: 3/5 (seed: 3/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "predict on oof...  done.\n",
+      "# Fold: 4/5 (seed: 3/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "predict on oof...  done.\n",
+      "# Fold: 5/5 (seed: 3/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "predict on oof...  done.\n",
+      "Seed: 597, 4/5\n",
+      "# Fold: 1/5 (seed: 4/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "predict on oof...  done.\n",
+      "# Fold: 2/5 (seed: 4/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "predict on oof...  done.\n",
+      "# Fold: 3/5 (seed: 4/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "predict on oof...  done.\n",
+      "# Fold: 4/5 (seed: 4/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "predict on oof...  done.\n",
+      "# Fold: 5/5 (seed: 4/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "predict on oof...  done.\n",
+      "Seed: 103, 5/5\n",
+      "# Fold: 1/5 (seed: 5/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "predict on oof...  done.\n",
+      "# Fold: 2/5 (seed: 5/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "predict on oof...  done.\n",
+      "# Fold: 3/5 (seed: 5/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "predict on oof...  done.\n",
+      "# Fold: 4/5 (seed: 5/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "predict on oof...  done.\n",
+      "# Fold: 5/5 (seed: 5/5)\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1433: UserWarning: Overriding the parameters from Reference Dataset.\n",
+      "  _log_warning('Overriding the parameters from Reference Dataset.')\n",
+      "/opt/conda/lib/python3.7/site-packages/lightgbm/basic.py:1245: UserWarning: categorical_column in param dict is overridden.\n",
+      "  _log_warning('{} in param dict is overridden.'.format(cat_alias))\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "predict on oof...  done.\n"
+     ]
+    }
+   ],
+   "source": [
+    "oof = np.zeros((X.shape[0], n_seed)) # cv_score\n",
     "seeds = []\n",
     "for i_seed in range(n_seed):\n",
     "    seed = FIXED_SEEDS[i_seed]\n",
@@ -638,13 +1080,13 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 218,
-   "id": "c1241f23",
+   "execution_count": 83,
+   "id": "bb1a8ba6",
    "metadata": {},
    "outputs": [],
    "source": [
     "if n_fold != 1:\n",
-    "    Y_predicted = (np.mean(oof, axis = 1) > prediction_threshold).astype(int)\n",
+    "    Y_predicted = (np.mean(oof, axis = 1) > threshold).astype(int)\n",
     "    Y_test = funnel[['client_id', 'sale_flg']].set_index('client_id')\n",
     "    test_funnel =  funnel.set_index('client_id')\n",
     "if n_fold == 1 and n_seed == 1:\n",
@@ -655,8 +1097,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 219,
-   "id": "5511266f",
+   "execution_count": 84,
+   "id": "856f5a14",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -669,8 +1111,8 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 220,
-   "id": "03fca335",
+   "execution_count": 85,
+   "id": "967d2046",
    "metadata": {},
    "outputs": [
     {
@@ -710,17 +1152,17 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 221,
-   "id": "f6669fe9",
+   "execution_count": 86,
+   "id": "3c0f9ee2",
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Public ANIC 5365.358979905113 Private ANIC 5653.409841613172\n",
-      "ANIC 5557.392887710485\n",
-      "Accuracy score: 0.8324495301888548\n"
+      "Public ANIC 5320.639492045777 Private ANIC 5696.862573262629\n",
+      "ANIC 5571.454879523678\n",
+      "Accuracy score: 0.8310540515396782\n"
      ]
     }
    ],
@@ -733,20 +1175,84 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 211,
-   "id": "2947797d",
+   "execution_count": 41,
+   "id": "13c5fe88",
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "<AxesSubplot:title={'center':'Feature importance'}, xlabel='Feature importance', ylabel='Features'>"
+      ]
+     },
+     "execution_count": 41,
+     "metadata": {},
+     "output_type": "execute_result"
+    },
+    {
+     "data": {
+      "text/plain": [
+       "<Figure size 2160x2160 with 0 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
    "source": [
-    "if USE_WANDB:\n",
-    "    wandb.run.summary[\"validation_accuracy\"] = validation_accuracy\n",
-    "    wandb.run.summary[\"anic\"] = (public_score + private_score) / 2"
+    "import lightgbm\n",
+    "import matplotlib.pyplot as plt\n",
+    "plt.figure(figsize = (30, 30))\n",
+    "lightgbm.plot_importance(model)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 42,
+   "id": "861ac75d",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "array(['city', 'education', 'client_segment', 'region', 'age',\n",
+       "       'feature_7 / feature_10', 'feature_4 / feature_6',\n",
+       "       'feature_2 * feature_9', 'region_cd', 'feature_7 - feature_8',\n",
+       "       'feature_6 * feature_7', 'feature_8 / feature_7',\n",
+       "       'feature_4 + feature_5', 'feature_1 * feature_9',\n",
+       "       'feature_8 / feature_10', 'feature_1 / feature_9',\n",
+       "       'feature_7 / feature_8', 'feature_2 / feature_6',\n",
+       "       'feature_1 * feature_5', 'feature_2 / feature_5'], dtype=object)"
+      ]
+     },
+     "execution_count": 42,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
+   "source": [
+    "feature_importance = pd.DataFrame(np.array([list(X.columns),model.feature_importances_]).T)\n",
+    "feature_importance.columns = ['column', 'importance']\n",
+    "feature_importance['importance'] = feature_importance['importance'].map(int)\n",
+    "feature_importance.sort_values(by='importance', ascending = False).iloc[:20, 0].values"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 22,
-   "id": "da160a13",
+   "execution_count": 329,
+   "id": "b3d9148c",
    "metadata": {},
    "outputs": [],
    "source": [
@@ -756,10 +1262,138 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 23,
-   "id": "b4fdd17c",
+   "execution_count": 330,
+   "id": "f9b951db",
+   "metadata": {},
+   "outputs": [
+    {
+     "ename": "AttributeError",
+     "evalue": "'NoneType' object has no attribute 'summary'",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
+      "\u001b[0;32m<ipython-input-330-ace4ffb020da>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mUSE_WANDB\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0mwandb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msummary\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"validation_accuracy\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalidation_accuracy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0mwandb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msummary\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"anic\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mpublic_score\u001b[0m\u001b[0;34m+\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m3\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mprivate_score\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
+      "\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'summary'"
+     ]
+    }
+   ],
+   "source": [
+    "if USE_WANDB:\n",
+    "    wandb.run.summary[\"validation_accuracy\"] = validation_accuracy\n",
+    "    wandb.run.summary[\"anic\"] = 1/3*public_score+ 2/3 * private_score"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 100,
+   "id": "776b611a",
    "metadata": {},
    "outputs": [],
+   "source": [
+    "if make_submission:\n",
+    "    public_anic = float(input())\n",
+    "    wandb.run.summary[\"public_anic\"] = public_anic"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 101,
+   "id": "14b5dff3",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<br/>Waiting for W&B process to finish, PID 26812<br/>Program ended successfully."
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "VBox(children=(Label(value=' 0.03MB of 0.03MB uploaded (0.00MB deduped)\\r'), FloatProgress(value=1.0, max=1.0)â€¦"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Find user logs for this run at: <code>/home/jupyter/idao-2021-finals/wandb/run-20210417_155338-1btmkefi/logs/debug.log</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Find internal logs for this run at: <code>/home/jupyter/idao-2021-finals/wandb/run-20210417_155338-1btmkefi/logs/debug-internal.log</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<h3>Run summary:</h3><br/><style>\n",
+       "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n",
+       "    </style><table class=\"wandb\">\n",
+       "<tr><td>validation_accuracy</td><td>0.84343</td></tr><tr><td>anic</td><td>5471.22899</td></tr></table>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 1 other file(s)"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "\n",
+       "                    <br/>Synced <strong style=\"color:#cdcd00\">2021-04-17_15:53:38</strong>: <a href=\"https://wandb.ai/artkulak/idao-2021-finals/runs/1btmkefi\" target=\"_blank\">https://wandb.ai/artkulak/idao-2021-finals/runs/1btmkefi</a><br/>\n",
+       "                "
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
    "source": [
     "if USE_WANDB:\n",
     "    run.finish()"
diff --git a/wandb/latest-run b/wandb/latest-run
index 84eec06..78ad42d 120000
--- a/wandb/latest-run
+++ b/wandb/latest-run
@@ -1 +1 @@
-run-20210417_121938-1m2lz99f
\ No newline at end of file
+run-20210417_210200-1iwwtpsn
\ No newline at end of file
